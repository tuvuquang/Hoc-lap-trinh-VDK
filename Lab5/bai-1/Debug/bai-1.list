
bai-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000125c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013f0  080013f0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013f0  080013f0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080013f0  080013f0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f0  080013f0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f0  080013f0  000113f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080013f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000024  0800141c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  0800141c  00020050  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005818  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013a4  00000000  00000000  00025866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00026c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  000272b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000baa6  00000000  00000000  000278a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000055ac  00000000  00000000  0003334e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00040951  00000000  00000000  000388fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007924b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b78  00000000  00000000  000792a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013d8 	.word	0x080013d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080013d8 	.word	0x080013d8

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <SystemInit+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a11      	ldr	r2, [pc, #68]	; (8000224 <SystemInit+0x50>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <SystemInit+0x50>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <SystemInit+0x50>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <SystemInit+0x50>)
 80001f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <SystemInit+0x50>)
 80001fc:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <SystemInit+0x54>)
 80001fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <SystemInit+0x50>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <SystemInit+0x50>)
 8000206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <SystemInit+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000212:	f000 f88d 	bl	8000330 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	24003010 	.word	0x24003010
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	2302      	movs	r3, #2
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024a:	4b34      	ldr	r3, [pc, #208]	; (800031c <SystemCoreClockUpdate+0xec>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	f003 030c 	and.w	r3, r3, #12
 8000252:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	2b08      	cmp	r3, #8
 8000258:	d011      	beq.n	800027e <SystemCoreClockUpdate+0x4e>
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	2b08      	cmp	r3, #8
 800025e:	d844      	bhi.n	80002ea <SystemCoreClockUpdate+0xba>
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d003      	beq.n	800026e <SystemCoreClockUpdate+0x3e>
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	2b04      	cmp	r3, #4
 800026a:	d004      	beq.n	8000276 <SystemCoreClockUpdate+0x46>
 800026c:	e03d      	b.n	80002ea <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800026e:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000270:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e03d      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000278:	4a2b      	ldr	r2, [pc, #172]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800027a:	601a      	str	r2, [r3, #0]
      break;
 800027c:	e039      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <SystemCoreClockUpdate+0xec>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	0d9b      	lsrs	r3, r3, #22
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SystemCoreClockUpdate+0xec>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000292:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00c      	beq.n	80002b4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029a:	4a23      	ldr	r2, [pc, #140]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a2:	4a1e      	ldr	r2, [pc, #120]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002a4:	6852      	ldr	r2, [r2, #4]
 80002a6:	0992      	lsrs	r2, r2, #6
 80002a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	e00b      	b.n	80002cc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	4a17      	ldr	r2, [pc, #92]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002be:	6852      	ldr	r2, [r2, #4]
 80002c0:	0992      	lsrs	r2, r2, #6
 80002c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002c6:	fb02 f303 	mul.w	r3, r2, r3
 80002ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	0c1b      	lsrs	r3, r3, #16
 80002d2:	f003 0303 	and.w	r3, r3, #3
 80002d6:	3301      	adds	r3, #1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002e6:	6013      	str	r3, [r2, #0]
      break;
 80002e8:	e003      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	091b      	lsrs	r3, r3, #4
 80002f8:	f003 030f 	and.w	r3, r3, #15
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SystemCoreClockUpdate+0xfc>)
 80002fe:	5cd3      	ldrb	r3, [r2, r3]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	fa22 f303 	lsr.w	r3, r2, r3
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	bf00      	nop
 8000314:	371c      	adds	r7, #28
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40023800 	.word	0x40023800
 8000320:	20000000 	.word	0x20000000
 8000324:	00f42400 	.word	0x00f42400
 8000328:	017d7840 	.word	0x017d7840
 800032c:	20000004 	.word	0x20000004

08000330 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <SetSysClock+0x90>)
 8000336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000338:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <SetSysClock+0x90>)
 800033a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <SetSysClock+0x94>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <SetSysClock+0x94>)
 8000346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800034a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000356:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <SetSysClock+0x90>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <SetSysClock+0x90>)
 8000362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000366:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <SetSysClock+0x90>)
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <SetSysClock+0x98>)
 800036c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <SetSysClock+0x90>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <SetSysClock+0x90>)
 8000374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000378:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800037a:	bf00      	nop
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <SetSysClock+0x90>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <SetSysClock+0x9c>)
 800038a:	f240 6202 	movw	r2, #1538	; 0x602
 800038e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <SetSysClock+0x90>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <SetSysClock+0x90>)
 8000396:	f023 0303 	bic.w	r3, r3, #3
 800039a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <SetSysClock+0x90>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <SetSysClock+0x90>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003a8:	bf00      	nop
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <SetSysClock+0x90>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	f003 030c 	and.w	r3, r3, #12
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	d1f9      	bne.n	80003aa <SetSysClock+0x7a>
}
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40023800 	.word	0x40023800
 80003c4:	40007000 	.word	0x40007000
 80003c8:	08015410 	.word	0x08015410
 80003cc:	40023c00 	.word	0x40023c00

080003d0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
 80003dc:	2300      	movs	r3, #0
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	230f      	movs	r3, #15
 80003e2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	78db      	ldrb	r3, [r3, #3]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d039      	beq.n	8000460 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80003ec:	4b27      	ldr	r3, [pc, #156]	; (800048c <NVIC_Init+0xbc>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	43db      	mvns	r3, r3
 80003f2:	0a1b      	lsrs	r3, r3, #8
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	f1c3 0304 	rsb	r3, r3, #4
 8000402:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000404:	7b7a      	ldrb	r2, [r7, #13]
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	fa42 f303 	asr.w	r3, r2, r3
 800040c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	785b      	ldrb	r3, [r3, #1]
 8000412:	461a      	mov	r2, r3
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	fa02 f303 	lsl.w	r3, r2, r3
 800041a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	789a      	ldrb	r2, [r3, #2]
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	4013      	ands	r3, r2
 8000424:	b2da      	uxtb	r2, r3
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	4313      	orrs	r3, r2
 800042a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000432:	4a17      	ldr	r2, [pc, #92]	; (8000490 <NVIC_Init+0xc0>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4413      	add	r3, r2
 800043a:	7bfa      	ldrb	r2, [r7, #15]
 800043c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000448:	4911      	ldr	r1, [pc, #68]	; (8000490 <NVIC_Init+0xc0>)
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	7812      	ldrb	r2, [r2, #0]
 800044e:	0952      	lsrs	r2, r2, #5
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000454:	2201      	movs	r2, #1
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800045a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800045e:	e00f      	b.n	8000480 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000468:	4909      	ldr	r1, [pc, #36]	; (8000490 <NVIC_Init+0xc0>)
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	7812      	ldrb	r2, [r2, #0]
 800046e:	0952      	lsrs	r2, r2, #5
 8000470:	b2d2      	uxtb	r2, r2
 8000472:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000474:	2201      	movs	r2, #1
 8000476:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000478:	f100 0320 	add.w	r3, r0, #32
 800047c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	e000e100 	.word	0xe000e100

08000494 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000494:	b480      	push	{r7}
 8000496:	b087      	sub	sp, #28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	e076      	b.n	800059e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004b0:	2201      	movs	r2, #1
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d165      	bne.n	8000598 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	2103      	movs	r1, #3
 80004d6:	fa01 f303 	lsl.w	r3, r1, r3
 80004da:	43db      	mvns	r3, r3
 80004dc:	401a      	ands	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	4619      	mov	r1, r3
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	431a      	orrs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d003      	beq.n	800050a <GPIO_Init+0x76>
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d12e      	bne.n	8000568 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	401a      	ands	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	4619      	mov	r1, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	b29b      	uxth	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	2301      	movs	r3, #1
 8000544:	408b      	lsls	r3, r1
 8000546:	43db      	mvns	r3, r3
 8000548:	401a      	ands	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	7992      	ldrb	r2, [r2, #6]
 8000556:	4611      	mov	r1, r2
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	b292      	uxth	r2, r2
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	b292      	uxth	r2, r2
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	b29b      	uxth	r3, r3
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	2103      	movs	r1, #3
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	43db      	mvns	r3, r3
 800057a:	401a      	ands	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	79db      	ldrb	r3, [r3, #7]
 8000588:	4619      	mov	r1, r3
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	431a      	orrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d985      	bls.n	80004b0 <GPIO_Init+0x1c>
    }
  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	4013      	ands	r3, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e001      	b.n	80005d6 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	887a      	ldrh	r2, [r7, #2]
 80005f2:	831a      	strh	r2, [r3, #24]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	835a      	strh	r2, [r3, #26]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	807b      	strh	r3, [r7, #2]
 8000626:	4613      	mov	r3, r2
 8000628:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000632:	787a      	ldrb	r2, [r7, #1]
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	b29b      	uxth	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3208      	adds	r2, #8
 800064e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	f003 0307 	and.w	r3, r3, #7
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	210f      	movs	r1, #15
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	8879      	ldrh	r1, [r7, #2]
 8000664:	08c9      	lsrs	r1, r1, #3
 8000666:	b289      	uxth	r1, r1
 8000668:	4608      	mov	r0, r1
 800066a:	ea02 0103 	and.w	r1, r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f100 0208 	add.w	r2, r0, #8
 8000674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	b29b      	uxth	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3208      	adds	r2, #8
 8000684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	4313      	orrs	r3, r2
 800068c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	08db      	lsrs	r3, r3, #3
 8000692:	b29b      	uxth	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3208      	adds	r2, #8
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
	...

080006ac <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006ba:	2300      	movs	r3, #0
 80006bc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80006be:	2304      	movs	r3, #4
 80006c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80006c2:	4b57      	ldr	r3, [pc, #348]	; (8000820 <I2C_Init+0x174>)
 80006c4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80006cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006d2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fa2f 	bl	8000b3c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	4a4f      	ldr	r2, [pc, #316]	; (8000824 <I2C_Init+0x178>)
 80006e6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ea:	0c9b      	lsrs	r3, r3, #18
 80006ec:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80006ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006f2:	4313      	orrs	r3, r2
 80006f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006fa:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	b29b      	uxth	r3, r3
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a44      	ldr	r2, [pc, #272]	; (8000828 <I2C_Init+0x17c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d815      	bhi.n	8000746 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	69fa      	ldr	r2, [r7, #28]
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800072a:	2b03      	cmp	r3, #3
 800072c:	d801      	bhi.n	8000732 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800072e:	2304      	movs	r3, #4
 8000730:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000732:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000736:	4313      	orrs	r3, r2
 8000738:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800073a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800073c:	3301      	adds	r3, #1
 800073e:	b29a      	uxth	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	841a      	strh	r2, [r3, #32]
 8000744:	e040      	b.n	80007c8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	88db      	ldrh	r3, [r3, #6]
 800074a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800074e:	4293      	cmp	r3, r2
 8000750:	d109      	bne.n	8000766 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	69fa      	ldr	r2, [r7, #28]
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000764:	e00e      	b.n	8000784 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	009a      	lsls	r2, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	69fa      	ldr	r2, [r7, #28]
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800077c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800078a:	2b00      	cmp	r3, #0
 800078c:	d103      	bne.n	8000796 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800078e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800079a:	4313      	orrs	r3, r2
 800079c:	b29b      	uxth	r3, r3
 800079e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80007a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80007a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80007a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ae:	fb02 f303 	mul.w	r3, r2, r3
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <I2C_Init+0x180>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	1192      	asrs	r2, r2, #6
 80007ba:	17db      	asrs	r3, r3, #31
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	3301      	adds	r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007cc:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80007e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007e6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80007ea:	f023 0302 	bic.w	r3, r3, #2
 80007ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	889a      	ldrh	r2, [r3, #4]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	895b      	ldrh	r3, [r3, #10]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007fe:	4313      	orrs	r3, r2
 8000800:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000806:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	899a      	ldrh	r2, [r3, #12]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	891b      	ldrh	r3, [r3, #8]
 8000810:	4313      	orrs	r3, r2
 8000812:	b29a      	uxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	811a      	strh	r2, [r3, #8]
}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	007a1200 	.word	0x007a1200
 8000824:	431bde83 	.word	0x431bde83
 8000828:	000186a0 	.word	0x000186a0
 800082c:	10624dd3 	.word	0x10624dd3

08000830 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d008      	beq.n	8000854 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	b29a      	uxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000852:	e007      	b.n	8000864 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	f023 0301 	bic.w	r3, r3, #1
 800085e:	b29a      	uxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	801a      	strh	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088a:	b29a      	uxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000890:	e007      	b.n	80008a2 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b29b      	uxth	r3, r3
 8000898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800089c:	b29a      	uxth	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	801a      	strh	r2, [r3, #0]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d008      	beq.n	80008d0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80008ce:	e007      	b.n	80008e0 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008da:	b29a      	uxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	801a      	strh	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
 80008f6:	4613      	mov	r3, r2
 80008f8:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80008fa:	78bb      	ldrb	r3, [r7, #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d004      	beq.n	800090a <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	70fb      	strb	r3, [r7, #3]
 8000908:	e003      	b.n	8000912 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	821a      	strh	r2, [r3, #16]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d008      	beq.n	8000948 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8000946:	e007      	b.n	8000958 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000952:	b29a      	uxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	801a      	strh	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	b29a      	uxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	821a      	strh	r2, [r3, #16]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	8a1b      	ldrh	r3, [r3, #16]
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	807b      	strh	r3, [r7, #2]
 80009a6:	4613      	mov	r3, r2
 80009a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80009aa:	787b      	ldrb	r3, [r7, #1]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d008      	beq.n	80009c2 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	889b      	ldrh	r3, [r3, #4]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 80009c0:	e009      	b.n	80009d6 <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	889b      	ldrh	r3, [r3, #4]
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	43db      	mvns	r3, r3
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4013      	ands	r3, r2
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	809a      	strh	r2, [r3, #4]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80009f6:	2300      	movs	r3, #0
 80009f8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	8a9b      	ldrh	r3, [r3, #20]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	8b1b      	ldrh	r3, [r3, #24]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	041b      	lsls	r3, r3, #16
 8000a0e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a1a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	4013      	ands	r3, r2
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d102      	bne.n	8000a2e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	75fb      	strb	r3, [r7, #23]
 8000a2c:	e001      	b.n	8000a32 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	371c      	adds	r7, #28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b087      	sub	sp, #28
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	8a9b      	ldrh	r3, [r3, #20]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	8b1b      	ldrh	r3, [r3, #24]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	041b      	lsls	r3, r3, #16
 8000a66:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a72:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8000a74:	697b      	ldr	r3, [r7, #20]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	0f1b      	lsrs	r3, r3, #28
 8000a9e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000aa6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3314      	adds	r3, #20
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e005      	b.n	8000ac2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	0c1b      	lsrs	r3, r3, #16
 8000aba:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3318      	adds	r3, #24
 8000ac0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	75fb      	strb	r3, [r7, #23]
 8000ad2:	e001      	b.n	8000ad8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	371c      	adds	r7, #28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000af8:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	829a      	strh	r2, [r3, #20]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	829a      	strh	r2, [r3, #20]
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 030c 	and.w	r3, r3, #12
 8000b64:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	d011      	beq.n	8000b90 <RCC_GetClocksFreq+0x54>
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d844      	bhi.n	8000bfc <RCC_GetClocksFreq+0xc0>
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <RCC_GetClocksFreq+0x44>
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d004      	beq.n	8000b88 <RCC_GetClocksFreq+0x4c>
 8000b7e:	e03d      	b.n	8000bfc <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a42      	ldr	r2, [pc, #264]	; (8000c8c <RCC_GetClocksFreq+0x150>)
 8000b84:	601a      	str	r2, [r3, #0]
    break;
 8000b86:	e03d      	b.n	8000c04 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <RCC_GetClocksFreq+0x154>)
 8000b8c:	601a      	str	r2, [r3, #0]
    break;
 8000b8e:	e039      	b.n	8000c04 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b90:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	0d9b      	lsrs	r3, r3, #22
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ba4:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00c      	beq.n	8000bc6 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000bac:	4a38      	ldr	r2, [pc, #224]	; (8000c90 <RCC_GetClocksFreq+0x154>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000bb6:	6852      	ldr	r2, [r2, #4]
 8000bb8:	0992      	lsrs	r2, r2, #6
 8000bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bbe:	fb02 f303 	mul.w	r3, r2, r3
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	e00b      	b.n	8000bde <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <RCC_GetClocksFreq+0x150>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000bd0:	6852      	ldr	r2, [r2, #4]
 8000bd2:	0992      	lsrs	r2, r2, #6
 8000bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bd8:	fb02 f303 	mul.w	r3, r2, r3
 8000bdc:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	0c1b      	lsrs	r3, r3, #16
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	3301      	adds	r3, #1
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
    break;
 8000bfa:	e003      	b.n	8000c04 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <RCC_GetClocksFreq+0x150>)
 8000c00:	601a      	str	r2, [r3, #0]
    break;
 8000c02:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c14:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <RCC_GetClocksFreq+0x158>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	40da      	lsrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c34:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	0a9b      	lsrs	r3, r3, #10
 8000c3a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c3c:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <RCC_GetClocksFreq+0x158>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	40da      	lsrs	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <RCC_GetClocksFreq+0x14c>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000c5c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	0b5b      	lsrs	r3, r3, #13
 8000c62:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <RCC_GetClocksFreq+0x158>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	40da      	lsrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	60da      	str	r2, [r3, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3724      	adds	r7, #36	; 0x24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	00f42400 	.word	0x00f42400
 8000c90:	017d7840 	.word	0x017d7840
 8000c94:	20000014 	.word	0x20000014

08000c98 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000cb6:	e006      	b.n	8000cc6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4903      	ldr	r1, [pc, #12]	; (8000cd0 <RCC_AHB1PeriphClockCmd+0x38>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <RCC_APB1PeriphClockCmd+0x38>)
 8000ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <RCC_APB1PeriphClockCmd+0x38>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000cf2:	e006      	b.n	8000d02 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <RCC_APB1PeriphClockCmd+0x38>)
 8000cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4903      	ldr	r1, [pc, #12]	; (8000d0c <RCC_APB1PeriphClockCmd+0x38>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40023800 	.word	0x40023800

08000d10 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	889b      	ldrh	r3, [r3, #4]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d22:	b29b      	uxth	r3, r3
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b087      	sub	sp, #28
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d107      	bne.n	8000d7c <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	899b      	ldrh	r3, [r3, #12]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	4013      	ands	r3, r2
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e011      	b.n	8000da0 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d107      	bne.n	8000d92 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	8a1b      	ldrh	r3, [r3, #16]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e006      	b.n	8000da0 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	8a9b      	ldrh	r3, [r3, #20]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000da8:	2201      	movs	r2, #1
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <USART_GetITStatus+0xa4>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	74fb      	strb	r3, [r7, #19]
 8000dd0:	e001      	b.n	8000dd6 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000dd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	81fb      	strh	r3, [r7, #14]
 8000df2:	2300      	movs	r3, #0
 8000df4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	801a      	strh	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Handler+0x18>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <SysTick_Handler+0x18>)
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000040 	.word	0x20000040

08000e38 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3e:	b672      	cpsid	i
}
 8000e40:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000e42:	f240 5125 	movw	r1, #1317	; 0x525
 8000e46:	480f      	ldr	r0, [pc, #60]	; (8000e84 <USART2_IRQHandler+0x4c>)
 8000e48:	f7ff ff71 	bl	8000d2e <USART_GetITStatus>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d112      	bne.n	8000e78 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <USART2_IRQHandler+0x50>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <USART2_IRQHandler+0x4c>)
 8000e5a:	f7ff ff59 	bl	8000d10 <USART_ReceiveData>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000e64:	1cfb      	adds	r3, r7, #3
 8000e66:	4619      	mov	r1, r3
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f821 	bl	8000eb0 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000e6e:	f240 5125 	movw	r1, #1317	; 0x525
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <USART2_IRQHandler+0x4c>)
 8000e74:	f7ff ffb5 	bl	8000de2 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e78:	b662      	cpsie	i
}
 8000e7a:	bf00      	nop
    }
    __enable_irq();
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	20000044 	.word	0x20000044

08000e8c <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	885a      	ldrh	r2, [r3, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	bf2c      	ite	cs
 8000ea0:	2301      	movcs	r3, #1
 8000ea2:	2300      	movcc	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000eba:	b672      	cpsid	i
}
 8000ebc:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e021      	b.n	8000f08 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	441a      	add	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	88c9      	ldrh	r1, [r1, #6]
 8000ed2:	440b      	add	r3, r1
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	88db      	ldrh	r3, [r3, #6]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4013      	ands	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	885b      	ldrh	r3, [r3, #2]
 8000efa:	3301      	adds	r3, #1
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	3301      	adds	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3d8      	bcc.n	8000ec4 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffba 	bl	8000e8c <bufIsFull>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d011      	beq.n	8000f42 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	891a      	ldrh	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f42:	b662      	cpsie	i
}
 8000f44:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <main>:

/* Private variables ---------------------------------------------------------*/
uint8_t Data_Receive;

int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	AppInitCommon();
 8000f56:	f000 f839 	bl	8000fcc <AppInitCommon>

	while(1)
	{
	    if (GPIO_ReadInputDataBit(BUTTON_CFG_PORT, BUTTON_CFG_PIN) == Bit_RESET)
 8000f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <main+0x70>)
 8000f60:	f7ff fb26 	bl	80005b0 <GPIO_ReadInputDataBit>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d109      	bne.n	8000f7e <main+0x2e>
		{
			I2C_Start();
 8000f6a:	f000 f92d 	bl	80011c8 <I2C_Start>

			I2C_SendAddress(SERIAL_ADR);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f000 f948 	bl	8001204 <I2C_SendAddress>

			I2C_TransmitData(DATA_RCV_VALID);
 8000f74:	2010      	movs	r0, #16
 8000f76:	f000 f961 	bl	800123c <I2C_TransmitData>

			I2C_Stop();
 8000f7a:	f000 f97b 	bl	8001274 <I2C_Stop>
		}

	    if (Data_Receive == DATA_RCV_VALID)
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <main+0x74>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b10      	cmp	r3, #16
 8000f84:	d1e9      	bne.n	8000f5a <main+0xa>
	    {
	    	for (int i = 0; i < LED_NUM_OF_BLINK; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	e012      	b.n	8000fb2 <main+0x62>
	    	{
	    		GPIO_SetBits(LED_IND_PORT, LED_IND_PIN);
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <main+0x78>)
 8000f90:	f7ff fb27 	bl	80005e2 <GPIO_SetBits>
	    		Delay_ms(1000);
 8000f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f98:	f000 f9b0 	bl	80012fc <Delay_ms>
	    		GPIO_ResetBits(LED_IND_PORT, LED_IND_PIN);
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <main+0x78>)
 8000fa0:	f7ff fb2d 	bl	80005fe <GPIO_ResetBits>
	    		Delay_ms(1000);
 8000fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa8:	f000 f9a8 	bl	80012fc <Delay_ms>
	    	for (int i = 0; i < LED_NUM_OF_BLINK; i++)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	dde9      	ble.n	8000f8c <main+0x3c>
	    	}
	    	Data_Receive = DATA_RCV_IDLE;
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <main+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	    if (GPIO_ReadInputDataBit(BUTTON_CFG_PORT, BUTTON_CFG_PIN) == Bit_RESET)
 8000fbe:	e7cc      	b.n	8000f5a <main+0xa>
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	2000004c 	.word	0x2000004c
 8000fc8:	40020000 	.word	0x40020000

08000fcc <AppInitCommon>:
 * @param  None
 * @retval None
 */
static
void AppInitCommon(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	// System clock 84MHz ------------------------------------------------------
	SystemCoreClockUpdate();
 8000fd0:	f7ff f92e 	bl	8000230 <SystemCoreClockUpdate>

	// Initializes Button User -------------------------------------------------
	Button_Init();
 8000fd4:	f000 f822 	bl	800101c <Button_Init>

	// Initializes Led ---------------------------------------------------------
	Led_Init();
 8000fd8:	f000 f806 	bl	8000fe8 <Led_Init>

	// Initializes I2C3 Master -------------------------------------------------
	I2C_InitMaster();
 8000fdc:	f000 f89c 	bl	8001118 <I2C_InitMaster>

	// Initializes I2C1 Slave --------------------------------------------------
	I2C_InitSlave();
 8000fe0:	f000 f838 	bl	8001054 <I2C_InitSlave>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Led_Init>:
 * @brief  Led_Init
 * @param  None
 * @retval None
 */
static void Led_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(LED_IND_GPIO_RCC, ENABLE);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff fe51 	bl	8000c98 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = LED_IND_PIN;
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ffe:	2302      	movs	r3, #2
 8001000:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001002:	2300      	movs	r3, #0
 8001004:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(LED_IND_PORT, &GPIO_InitStructure);
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <Led_Init+0x30>)
 800100c:	f7ff fa42 	bl	8000494 <GPIO_Init>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020000 	.word	0x40020000

0800101c <Button_Init>:
 * @brief  Button_Init
 * @param  None
 * @retval None
 */
static void Button_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure ;

	RCC_AHB1PeriphClockCmd(BUTTON_CFG_GPIO_RCC, ENABLE);
 8001022:	2101      	movs	r1, #1
 8001024:	2004      	movs	r0, #4
 8001026:	f7ff fe37 	bl	8000c98 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800102a:	2300      	movs	r3, #0
 800102c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800102e:	2302      	movs	r3, #2
 8001030:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001032:	2301      	movs	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = BUTTON_CFG_PIN;
 8001036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103a:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_CFG_PORT, &GPIO_InitStructure);
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <Button_Init+0x34>)
 8001042:	f7ff fa27 	bl	8000494 <GPIO_Init>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020800 	.word	0x40020800

08001054 <I2C_InitSlave>:
 * @brief  I2C_InitSlave
 * @param  None
 * @retval None
 */
static void I2C_InitSlave(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	// Initialize GPIO as open drain alternate function ------------------------
	RCC_APB1PeriphClockCmd(I2C_SLAVE_RCC, ENABLE);
 800105a:	2101      	movs	r1, #1
 800105c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001060:	f7ff fe38 	bl	8000cd4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(I2C_SLAVE_GPIO_RCC, ENABLE);
 8001064:	2101      	movs	r1, #1
 8001066:	2002      	movs	r0, #2
 8001068:	f7ff fe16 	bl	8000c98 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800106c:	2302      	movs	r3, #2
 800106e:	733b      	strb	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001070:	2302      	movs	r3, #2
 8001072:	737b      	strb	r3, [r7, #13]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001074:	2301      	movs	r3, #1
 8001076:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]

	GPIO_InitStruct.GPIO_Pin = SCL_SLAVE_PIN | SDA_SLAVE_PIN;
 800107c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001080:	60bb      	str	r3, [r7, #8]
	GPIO_Init(I2C_SLAVE_PORT, &GPIO_InitStruct);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4619      	mov	r1, r3
 8001088:	4820      	ldr	r0, [pc, #128]	; (800110c <I2C_InitSlave+0xb8>)
 800108a:	f7ff fa03 	bl	8000494 <GPIO_Init>

	// Connect PB8 to I2C1_SCL -------------------------------------------------
	GPIO_PinAFConfig(I2C_SLAVE_PORT, GPIO_PinSource8, GPIO_AF_I2C1);
 800108e:	2204      	movs	r2, #4
 8001090:	2108      	movs	r1, #8
 8001092:	481e      	ldr	r0, [pc, #120]	; (800110c <I2C_InitSlave+0xb8>)
 8001094:	f7ff fac1 	bl	800061a <GPIO_PinAFConfig>

	// Connect PB9 to I2C1_SDA -------------------------------------------------
	GPIO_PinAFConfig(I2C_SLAVE_PORT, GPIO_PinSource9, GPIO_AF_I2C1);
 8001098:	2204      	movs	r2, #4
 800109a:	2109      	movs	r1, #9
 800109c:	481b      	ldr	r0, [pc, #108]	; (800110c <I2C_InitSlave+0xb8>)
 800109e:	f7ff fabc 	bl	800061a <GPIO_PinAFConfig>

	// Initialize I2C1 ---------------------------------------------------------
	I2C_InitStruct.I2C_ClockSpeed = I2C_SPEED;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <I2C_InitSlave+0xbc>)
 80010a4:	613b      	str	r3, [r7, #16]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 80010a6:	2300      	movs	r3, #0
 80010a8:	82bb      	strh	r3, [r7, #20]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 80010aa:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80010ae:	82fb      	strh	r3, [r7, #22]
	I2C_InitStruct.I2C_OwnAddress1 = SERIAL_ADR;
 80010b0:	2302      	movs	r3, #2
 80010b2:	833b      	strh	r3, [r7, #24]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	837b      	strh	r3, [r7, #26]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80010ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010be:	83bb      	strh	r3, [r7, #28]

	I2C_Init(I2C_SLAVE_INSTANCE, &I2C_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <I2C_InitSlave+0xc0>)
 80010c8:	f7ff faf0 	bl	80006ac <I2C_Init>
	I2C_Cmd(I2C_SLAVE_INSTANCE, ENABLE);
 80010cc:	2101      	movs	r1, #1
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <I2C_InitSlave+0xc0>)
 80010d0:	f7ff fbae 	bl	8000830 <I2C_Cmd>

	// Configure interrupt -----------------------------------------------------
	I2C_ITConfig(I2C_SLAVE_INSTANCE, I2C_IT_EVT, ENABLE);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <I2C_InitSlave+0xc0>)
 80010dc:	f7ff fc5d 	bl	800099a <I2C_ITConfig>
	I2C_ITConfig(I2C_SLAVE_INSTANCE, I2C_IT_BUF, ENABLE);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <I2C_InitSlave+0xc0>)
 80010e8:	f7ff fc57 	bl	800099a <I2C_ITConfig>

	NVIC_InitStruct.NVIC_IRQChannel = I2C1_EV_IRQn;
 80010ec:	231f      	movs	r3, #31
 80010ee:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStruct);
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f966 	bl	80003d0 <NVIC_Init>
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020400 	.word	0x40020400
 8001110:	00061a80 	.word	0x00061a80
 8001114:	40005400 	.word	0x40005400

08001118 <I2C_InitMaster>:
 * @brief  I2C_InitMaster
 * @param  None
 * @retval None
 */
static void I2C_InitMaster(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	// Initialize GPIO as open drain alternate function ------------------------
	//Enable the i2c
	RCC_APB1PeriphClockCmd(I2C_MASTER_RCC, ENABLE);
 800111e:	2101      	movs	r1, #1
 8001120:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001124:	f7ff fdd6 	bl	8000cd4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(I2C_MASTER_GPIO_RCC, ENABLE);
 8001128:	2101      	movs	r1, #1
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff fdb4 	bl	8000c98 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001130:	2101      	movs	r1, #1
 8001132:	2004      	movs	r0, #4
 8001134:	f7ff fdb0 	bl	8000c98 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001138:	2302      	movs	r3, #2
 800113a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800113c:	2302      	movs	r3, #2
 800113e:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8001140:	2301      	movs	r3, #1
 8001142:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_UP;
 8001144:	2301      	movs	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStruct.GPIO_Pin = SCL_MASTER_PIN;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114c:	603b      	str	r3, [r7, #0]
	GPIO_Init(I2C_MASTER_PORT, &GPIO_InitStruct);
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4819      	ldr	r0, [pc, #100]	; (80011b8 <I2C_InitMaster+0xa0>)
 8001154:	f7ff f99e 	bl	8000494 <GPIO_Init>

	GPIO_InitStruct.GPIO_Pin = SDA_MASTER_PIN;
 8001158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115c:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4816      	ldr	r0, [pc, #88]	; (80011bc <I2C_InitMaster+0xa4>)
 8001164:	f7ff f996 	bl	8000494 <GPIO_Init>

	// Connect PA8 to I2C3_SCL -------------------------------------------------
	GPIO_PinAFConfig(I2C_MASTER_PORT, GPIO_PinSource8, GPIO_AF_I2C3);
 8001168:	2204      	movs	r2, #4
 800116a:	2108      	movs	r1, #8
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <I2C_InitMaster+0xa0>)
 800116e:	f7ff fa54 	bl	800061a <GPIO_PinAFConfig>

	// Connect PB4 to I2C3_SDA -------------------------------------------------
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_I2C3);
 8001172:	2204      	movs	r2, #4
 8001174:	2109      	movs	r1, #9
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <I2C_InitMaster+0xa4>)
 8001178:	f7ff fa4f 	bl	800061a <GPIO_PinAFConfig>

	// Initialize I2C3 ---------------------------------------------------------
	I2C_InitStruct.I2C_ClockSpeed = I2C_SPEED;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <I2C_InitMaster+0xa8>)
 800117e:	60bb      	str	r3, [r7, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8001180:	2300      	movs	r3, #0
 8001182:	81bb      	strh	r3, [r7, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8001184:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001188:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 800118a:	2300      	movs	r3, #0
 800118c:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 800118e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001192:	827b      	strh	r3, [r7, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001194:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001198:	82bb      	strh	r3, [r7, #20]

	I2C_Init(I2C_MASTER_INSTANCE, &I2C_InitStruct);
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <I2C_InitMaster+0xac>)
 80011a2:	f7ff fa83 	bl	80006ac <I2C_Init>
	I2C_Cmd(I2C_MASTER_INSTANCE, ENABLE);
 80011a6:	2101      	movs	r1, #1
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <I2C_InitMaster+0xac>)
 80011aa:	f7ff fb41 	bl	8000830 <I2C_Cmd>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020800 	.word	0x40020800
 80011c0:	00061a80 	.word	0x00061a80
 80011c4:	40005c00 	.word	0x40005c00

080011c8 <I2C_Start>:
 * @param  None
 * @retval None
 */
static
void I2C_Start(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	// Wait until I2Cx is not busy anymore
	while (I2C_GetFlagStatus(I2C_MASTER_INSTANCE, I2C_FLAG_BUSY));
 80011cc:	bf00      	nop
 80011ce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <I2C_Start+0x34>)
 80011d4:	f7ff fc54 	bl	8000a80 <I2C_GetFlagStatus>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f7      	bne.n	80011ce <I2C_Start+0x6>

	// Generate start condition
	I2C_GenerateSTART(I2C_MASTER_INSTANCE, ENABLE);
 80011de:	2101      	movs	r1, #1
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <I2C_Start+0x34>)
 80011e2:	f7ff fb44 	bl	800086e <I2C_GenerateSTART>

	// Wait for I2C EV5.
	// It means that the start condition has been correctly released
	// on the I2C bus (the bus is free, no other devices is communicating))
	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_MODE_SELECT));
 80011e6:	bf00      	nop
 80011e8:	4905      	ldr	r1, [pc, #20]	; (8001200 <I2C_Start+0x38>)
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <I2C_Start+0x34>)
 80011ec:	f7ff fbf8 	bl	80009e0 <I2C_CheckEvent>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f8      	beq.n	80011e8 <I2C_Start+0x20>
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40005c00 	.word	0x40005c00
 8001200:	00030001 	.word	0x00030001

08001204 <I2C_SendAddress>:

static void I2C_SendAddress(uint8_t address) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	I2C_Send7bitAddress(I2C_MASTER_INSTANCE, address, I2C_Direction_Transmitter);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <I2C_SendAddress+0x30>)
 8001216:	f7ff fb68 	bl	80008ea <I2C_Send7bitAddress>

	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800121a:	bf00      	nop
 800121c:	4906      	ldr	r1, [pc, #24]	; (8001238 <I2C_SendAddress+0x34>)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <I2C_SendAddress+0x30>)
 8001220:	f7ff fbde 	bl	80009e0 <I2C_CheckEvent>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f8      	beq.n	800121c <I2C_SendAddress+0x18>
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005c00 	.word	0x40005c00
 8001238:	00070082 	.word	0x00070082

0800123c <I2C_TransmitData>:
 * @brief  Send bits data
 * @param  data
 * @retval None
 */
static void I2C_TransmitData(uint8_t data)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	// Send data byte
	I2C_SendData(I2C_MASTER_INSTANCE, data);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4619      	mov	r1, r3
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <I2C_TransmitData+0x30>)
 800124c:	f7ff fb89 	bl	8000962 <I2C_SendData>
	// Wait for I2C EV8_2.
	// It means that the data has been physically shifted out and
	// output on the bus)
	while (!I2C_CheckEvent(I2C_MASTER_INSTANCE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001250:	bf00      	nop
 8001252:	4907      	ldr	r1, [pc, #28]	; (8001270 <I2C_TransmitData+0x34>)
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <I2C_TransmitData+0x30>)
 8001256:	f7ff fbc3 	bl	80009e0 <I2C_CheckEvent>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f8      	beq.n	8001252 <I2C_TransmitData+0x16>
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40005c00 	.word	0x40005c00
 8001270:	00070084 	.word	0x00070084

08001274 <I2C_Stop>:
 * @param  None
 * @retval None
 */
static
void I2C_Stop(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	// Generate I2C stop condition
	I2C_GenerateSTOP(I2C_MASTER_INSTANCE, ENABLE);
 8001278:	2101      	movs	r1, #1
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <I2C_Stop+0x10>)
 800127c:	f7ff fb16 	bl	80008ac <I2C_GenerateSTOP>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40005c00 	.word	0x40005c00

08001288 <I2C1_EV_IRQHandler>:
 * @brief  I2C1_EV_IRQHandler
 * @param  None
 * @retval None
 */
void I2C1_EV_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	switch (I2C_GetLastEvent(I2C_SLAVE_INSTANCE))
 800128c:	4815      	ldr	r0, [pc, #84]	; (80012e4 <I2C1_EV_IRQHandler+0x5c>)
 800128e:	f7ff fbd6 	bl	8000a3e <I2C_GetLastEvent>
 8001292:	4603      	mov	r3, r0
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <I2C1_EV_IRQHandler+0x60>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00c      	beq.n	80012b4 <I2C1_EV_IRQHandler+0x2c>
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <I2C1_EV_IRQHandler+0x60>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d81a      	bhi.n	80012d6 <I2C1_EV_IRQHandler+0x4e>
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d013      	beq.n	80012cc <I2C1_EV_IRQHandler+0x44>
 80012a4:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 80012a8:	d115      	bne.n	80012d6 <I2C1_EV_IRQHandler+0x4e>
	{
	    case I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED:
	    	// The address sent by the master matches the own address of the peripheral
	        I2C_ClearFlag(I2C_SLAVE_INSTANCE, I2C_FLAG_ADDR);
 80012aa:	4910      	ldr	r1, [pc, #64]	; (80012ec <I2C1_EV_IRQHandler+0x64>)
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <I2C1_EV_IRQHandler+0x5c>)
 80012ae:	f7ff fc19 	bl	8000ae4 <I2C_ClearFlag>
	        break;
 80012b2:	e011      	b.n	80012d8 <I2C1_EV_IRQHandler+0x50>

	    case I2C_EVENT_SLAVE_BYTE_RECEIVED:
	    	Data_Receive = I2C_ReceiveData(I2C_SLAVE_INSTANCE);
 80012b4:	480b      	ldr	r0, [pc, #44]	; (80012e4 <I2C1_EV_IRQHandler+0x5c>)
 80012b6:	f7ff fb63 	bl	8000980 <I2C_ReceiveData>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <I2C1_EV_IRQHandler+0x68>)
 80012c0:	701a      	strb	r2, [r3, #0]
	        I2C_ClearFlag(I2C_SLAVE_INSTANCE, I2C_FLAG_RXNE);
 80012c2:	490c      	ldr	r1, [pc, #48]	; (80012f4 <I2C1_EV_IRQHandler+0x6c>)
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <I2C1_EV_IRQHandler+0x5c>)
 80012c6:	f7ff fc0d 	bl	8000ae4 <I2C_ClearFlag>
	        break;
 80012ca:	e005      	b.n	80012d8 <I2C1_EV_IRQHandler+0x50>

	    case I2C_EVENT_SLAVE_STOP_DETECTED:
	    	// Disable bit stop I2C1
	    	I2C_AcknowledgeConfig(I2C_SLAVE_INSTANCE, ENABLE);
 80012cc:	2101      	movs	r1, #1
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <I2C1_EV_IRQHandler+0x5c>)
 80012d0:	f7ff fb28 	bl	8000924 <I2C_AcknowledgeConfig>
            break;
 80012d4:	e000      	b.n	80012d8 <I2C1_EV_IRQHandler+0x50>

	    default:
		    break;
 80012d6:	bf00      	nop
    }

    I2C_ClearITPendingBit(I2C_SLAVE_INSTANCE, I2C_IT_RXNE);
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <I2C1_EV_IRQHandler+0x70>)
 80012da:	4802      	ldr	r0, [pc, #8]	; (80012e4 <I2C1_EV_IRQHandler+0x5c>)
 80012dc:	f7ff fc18 	bl	8000b10 <I2C_ClearITPendingBit>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400
 80012e8:	00020040 	.word	0x00020040
 80012ec:	10000002 	.word	0x10000002
 80012f0:	2000004c 	.word	0x2000004c
 80012f4:	10000040 	.word	0x10000040
 80012f8:	06000040 	.word	0x06000040

080012fc <Delay_ms>:
 * @brief  Delay
 * @param  None
 * @retval None
 */
static void Delay_ms(uint32_t ms)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	uint32_t i, j;

	for (i = 0 ; i < ms ; i ++)
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e00d      	b.n	8001326 <Delay_ms+0x2a>
	{
		for (j = 0; j < 5000; j++) {;}
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	e002      	b.n	8001316 <Delay_ms+0x1a>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3301      	adds	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f241 3287 	movw	r2, #4999	; 0x1387
 800131c:	4293      	cmp	r3, r2
 800131e:	d9f7      	bls.n	8001310 <Delay_ms+0x14>
	for (i = 0 ; i < ms ; i ++)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3ed      	bcc.n	800130a <Delay_ms+0xe>
	}
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
	...

0800133c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800133e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001340:	f7fe ff48 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <LoopForever+0x6>)
  ldr r1, =_edata
 8001346:	490d      	ldr	r1, [pc, #52]	; (800137c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <LoopForever+0xe>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800135c:	4c0a      	ldr	r4, [pc, #40]	; (8001388 <LoopForever+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800136a:	f000 f811 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136e:	f7ff fdef 	bl	8000f50 <main>

08001372 <LoopForever>:

LoopForever:
    b LoopForever
 8001372:	e7fe      	b.n	8001372 <LoopForever>
  ldr   r0, =_estack
 8001374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001380:	080013f8 	.word	0x080013f8
  ldr r2, =_sbss
 8001384:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001388:	20000050 	.word	0x20000050

0800138c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4d0d      	ldr	r5, [pc, #52]	; (80013c8 <__libc_init_array+0x38>)
 8001394:	4c0d      	ldr	r4, [pc, #52]	; (80013cc <__libc_init_array+0x3c>)
 8001396:	1b64      	subs	r4, r4, r5
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	2600      	movs	r6, #0
 800139c:	42a6      	cmp	r6, r4
 800139e:	d109      	bne.n	80013b4 <__libc_init_array+0x24>
 80013a0:	4d0b      	ldr	r5, [pc, #44]	; (80013d0 <__libc_init_array+0x40>)
 80013a2:	4c0c      	ldr	r4, [pc, #48]	; (80013d4 <__libc_init_array+0x44>)
 80013a4:	f000 f818 	bl	80013d8 <_init>
 80013a8:	1b64      	subs	r4, r4, r5
 80013aa:	10a4      	asrs	r4, r4, #2
 80013ac:	2600      	movs	r6, #0
 80013ae:	42a6      	cmp	r6, r4
 80013b0:	d105      	bne.n	80013be <__libc_init_array+0x2e>
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b8:	4798      	blx	r3
 80013ba:	3601      	adds	r6, #1
 80013bc:	e7ee      	b.n	800139c <__libc_init_array+0xc>
 80013be:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c2:	4798      	blx	r3
 80013c4:	3601      	adds	r6, #1
 80013c6:	e7f2      	b.n	80013ae <__libc_init_array+0x1e>
 80013c8:	080013f0 	.word	0x080013f0
 80013cc:	080013f0 	.word	0x080013f0
 80013d0:	080013f0 	.word	0x080013f0
 80013d4:	080013f4 	.word	0x080013f4

080013d8 <_init>:
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013da:	bf00      	nop
 80013dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013de:	bc08      	pop	{r3}
 80013e0:	469e      	mov	lr, r3
 80013e2:	4770      	bx	lr

080013e4 <_fini>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr
