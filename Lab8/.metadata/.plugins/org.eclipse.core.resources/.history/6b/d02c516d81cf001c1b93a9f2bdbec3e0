
/******************************************************************************/
/*                              INCLUDE FILES                                 */
/******************************************************************************/
#include <stdint.h>
#include <stm32f401re_adc.h>
#include <stm32f401re_usart.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_rcc.h>
#include <timer.h>

#include <typedefs.h>

/******************************************************************************/
/*                     PRIVATE TYPES and DEFINITIONS                         */
/******************************************************************************/


/******************************************************************************/
/*                     EXPORTED TYPES and DEFINITIONS                         */
/******************************************************************************/

/******************************************************************************/
/*                              PRIVATE DATA                                  */
/******************************************************************************/

/******************************************************************************/
/*                              EXPORTED DATA                                 */
/******************************************************************************/

/******************************************************************************/
/*                            PRIVATE FUNCTIONS                               */
/******************************************************************************/
static void_t init_ADC(void_t);
static void_t USART2_Init(void_t);
static void_t coverTemperature(void_t);
static void_t multilSensorScan(void_t);
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/


int main(void_t)
{
	SystemCoreClockUpdate();
	TimerInit();
	init_ADC();
	USART2_Init();
	ADC_SoftwareStartConv(ADC1);

	while(1)
	{
		multilSensorScan();
	}
}


/**
 * @func   ADC_Init
 * @brief  Initialize ADC
 * @param  None
 * @retval None
 */
static void_t init_ADC(void_t)
{
	ADC_InitTypeDef 							ADC_InitStructure;
	ADC_CommonInitTypeDef 						ADC_CommonInitStructure;

	// Enable ADC peripheral clocks
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);

	// Enable GPIOA Clock enables
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// ADC Deinit
	ADC_DeInit();

	//ADC common init
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	// ADC1 Init
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStructure.ADC_NbrOfConversion = 1;

	ADC_Init(ADC1, &ADC_InitStructure);

	ADC_RegularChannelConfig(ADC1, ADC_Channel_TempSensor, 1, ADC_SampleTime_144Cycles);

	ADC_TempSensorVrefintCmd(ENABLE);

	ADC_Cmd(ADC1, ENABLE);
}

/**
 * @func   coverTemperature
 * @brief  Send temp to PC
 * @param  None
 * @retval None
 */
static void_t coverTemperature(void_t)
{
	float TempvalueLast, Tempvalue;

	// wait cover finish
	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);

	// Save ADC1 value
	Tempvalue = ADC_GetConversionValue(ADC1);

	//Reading in mV
	Tempvalue *= 3300;

	Tempvalue /= 4096;

	//Reading in Volts
	Tempvalue /= (float)1000.0;

	//Subtract the reference voltage at 25oC
	Tempvalue -= (float)0.0025;

	//add the 25oC
	TempvalueLast = Tempvalue + (float)25.0;

	USART_SendData(USART2, TempvalueLast);
}

/**
 * @func   USART2_Init
 * @brief  Initialize USART2
 * @param  None
 * @retval None
 */
static void_t USART2_Init(void_t)
{
	GPIO_InitTypeDef 					GPIO_InitStruct;
	USART_InitTypeDef					USART_InitStruct;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
	GPIO_Init(GPIOA, &GPIO_InitStruct);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);

	//Enable USART

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

	USART_InitStruct.USART_BaudRate = 9600;
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStruct.USART_Mode = USART_Mode_Tx;
	USART_InitStruct.USART_Parity = USART_Parity_No;
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;

	USART_Init(USART2, &USART_InitStruct);

	USART_Cmd(USART2, ENABLE);
}

/**
 * @func   multilSensorScan
 * @brief  Scan sensor
 * @param  None
 * @retval None
 */
static void_t multilSensorScan(void_t)
{
	uint32_t dwTimeCurrent;
	static uint32_t dwTimeTotal, dwTimeInit;

	dwTimeCurrent = GetMilSecTick();

	if(dwTimeCurrent >= dwTimeInit)
	{
		dwTimeTotal += dwTimeCurrent - dwTimeInit;
	}
	else
	{
		dwTimeTotal += 0xFFFFFFFFU - dwTimeCurrent + dwTimeInit;
	}

	if(dwTimeTotal >= 1000)
	{
		dwTimeTotal = 0;
		coverTemperature();
	}
	dwTimeInit = dwTimeCurrent;
}

