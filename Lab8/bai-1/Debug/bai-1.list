
bai-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ce0  08000ce0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ce0  08000ce0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000ce0  08000ce0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ce0  08000ce0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce0  08000ce0  00010ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ce4  08000ce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000024  08000d0c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000d0c  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004282  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f89  00000000  00000000  000242d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e8  00000000  00000000  00025260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000460  00000000  00000000  00025748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b58b  00000000  00000000  00025ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000043c7  00000000  00000000  00031133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00041791  00000000  00000000  000354fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00076c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013f8  00000000  00000000  00076ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000cc8 	.word	0x08000cc8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08000cc8 	.word	0x08000cc8

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <SystemInit+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a11      	ldr	r2, [pc, #68]	; (8000224 <SystemInit+0x50>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <SystemInit+0x50>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <SystemInit+0x50>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <SystemInit+0x50>)
 80001f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <SystemInit+0x50>)
 80001fc:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <SystemInit+0x54>)
 80001fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <SystemInit+0x50>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <SystemInit+0x50>)
 8000206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <SystemInit+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000212:	f000 f88d 	bl	8000330 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	24003010 	.word	0x24003010
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	2302      	movs	r3, #2
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024a:	4b34      	ldr	r3, [pc, #208]	; (800031c <SystemCoreClockUpdate+0xec>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	f003 030c 	and.w	r3, r3, #12
 8000252:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	2b08      	cmp	r3, #8
 8000258:	d011      	beq.n	800027e <SystemCoreClockUpdate+0x4e>
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	2b08      	cmp	r3, #8
 800025e:	d844      	bhi.n	80002ea <SystemCoreClockUpdate+0xba>
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d003      	beq.n	800026e <SystemCoreClockUpdate+0x3e>
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	2b04      	cmp	r3, #4
 800026a:	d004      	beq.n	8000276 <SystemCoreClockUpdate+0x46>
 800026c:	e03d      	b.n	80002ea <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800026e:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000270:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e03d      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000278:	4a2b      	ldr	r2, [pc, #172]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800027a:	601a      	str	r2, [r3, #0]
      break;
 800027c:	e039      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <SystemCoreClockUpdate+0xec>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	0d9b      	lsrs	r3, r3, #22
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SystemCoreClockUpdate+0xec>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000292:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00c      	beq.n	80002b4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029a:	4a23      	ldr	r2, [pc, #140]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a2:	4a1e      	ldr	r2, [pc, #120]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002a4:	6852      	ldr	r2, [r2, #4]
 80002a6:	0992      	lsrs	r2, r2, #6
 80002a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	e00b      	b.n	80002cc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	4a17      	ldr	r2, [pc, #92]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002be:	6852      	ldr	r2, [r2, #4]
 80002c0:	0992      	lsrs	r2, r2, #6
 80002c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002c6:	fb02 f303 	mul.w	r3, r2, r3
 80002ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	0c1b      	lsrs	r3, r3, #16
 80002d2:	f003 0303 	and.w	r3, r3, #3
 80002d6:	3301      	adds	r3, #1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002e6:	6013      	str	r3, [r2, #0]
      break;
 80002e8:	e003      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	091b      	lsrs	r3, r3, #4
 80002f8:	f003 030f 	and.w	r3, r3, #15
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SystemCoreClockUpdate+0xfc>)
 80002fe:	5cd3      	ldrb	r3, [r2, r3]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	fa22 f303 	lsr.w	r3, r2, r3
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	bf00      	nop
 8000314:	371c      	adds	r7, #28
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40023800 	.word	0x40023800
 8000320:	20000000 	.word	0x20000000
 8000324:	00f42400 	.word	0x00f42400
 8000328:	017d7840 	.word	0x017d7840
 800032c:	20000004 	.word	0x20000004

08000330 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <SetSysClock+0x90>)
 8000336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000338:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <SetSysClock+0x90>)
 800033a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <SetSysClock+0x94>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <SetSysClock+0x94>)
 8000346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800034a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000356:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <SetSysClock+0x90>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <SetSysClock+0x90>)
 8000362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000366:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <SetSysClock+0x90>)
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <SetSysClock+0x98>)
 800036c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <SetSysClock+0x90>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <SetSysClock+0x90>)
 8000374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000378:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800037a:	bf00      	nop
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <SetSysClock+0x90>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <SetSysClock+0x9c>)
 800038a:	f240 6202 	movw	r2, #1538	; 0x602
 800038e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <SetSysClock+0x90>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <SetSysClock+0x90>)
 8000396:	f023 0303 	bic.w	r3, r3, #3
 800039a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <SetSysClock+0x90>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <SetSysClock+0x90>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003a8:	bf00      	nop
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <SetSysClock+0x90>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	f003 030c 	and.w	r3, r3, #12
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	d1f9      	bne.n	80003aa <SetSysClock+0x7a>
}
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40023800 	.word	0x40023800
 80003c4:	40007000 	.word	0x40007000
 80003c8:	08015410 	.word	0x08015410
 80003cc:	40023c00 	.word	0x40023c00

080003d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b087      	sub	sp, #28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	e076      	b.n	80004da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003ec:	2201      	movs	r2, #1
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	4013      	ands	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	429a      	cmp	r2, r3
 8000406:	d165      	bne.n	80004d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	2103      	movs	r1, #3
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43db      	mvns	r3, r3
 8000418:	401a      	ands	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	4619      	mov	r1, r3
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	431a      	orrs	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d003      	beq.n	8000446 <GPIO_Init+0x76>
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d12e      	bne.n	80004a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689a      	ldr	r2, [r3, #8]
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	401a      	ands	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	4619      	mov	r1, r3
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	b29b      	uxth	r3, r3
 800047c:	4619      	mov	r1, r3
 800047e:	2301      	movs	r3, #1
 8000480:	408b      	lsls	r3, r1
 8000482:	43db      	mvns	r3, r3
 8000484:	401a      	ands	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	7992      	ldrb	r2, [r2, #6]
 8000492:	4611      	mov	r1, r2
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	b292      	uxth	r2, r2
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	b292      	uxth	r2, r2
 800049e:	431a      	orrs	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	68da      	ldr	r2, [r3, #12]
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2103      	movs	r1, #3
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	401a      	ands	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	79db      	ldrb	r3, [r3, #7]
 80004c4:	4619      	mov	r1, r3
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	431a      	orrs	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	3301      	adds	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	2b0f      	cmp	r3, #15
 80004de:	d985      	bls.n	80003ec <GPIO_Init+0x1c>
    }
  }
}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	371c      	adds	r7, #28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]
 80004f8:	4613      	mov	r3, r2
 80004fa:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000504:	787a      	ldrb	r2, [r7, #1]
 8000506:	887b      	ldrh	r3, [r7, #2]
 8000508:	f003 0307 	and.w	r3, r3, #7
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000514:	887b      	ldrh	r3, [r7, #2]
 8000516:	08db      	lsrs	r3, r3, #3
 8000518:	b29b      	uxth	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3208      	adds	r2, #8
 8000520:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	210f      	movs	r1, #15
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	8879      	ldrh	r1, [r7, #2]
 8000536:	08c9      	lsrs	r1, r1, #3
 8000538:	b289      	uxth	r1, r1
 800053a:	4608      	mov	r0, r1
 800053c:	ea02 0103 	and.w	r1, r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f100 0208 	add.w	r2, r0, #8
 8000546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800054a:	887b      	ldrh	r3, [r7, #2]
 800054c:	08db      	lsrs	r3, r3, #3
 800054e:	b29b      	uxth	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	3208      	adds	r2, #8
 8000556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	4313      	orrs	r3, r2
 800055e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	08db      	lsrs	r3, r3, #3
 8000564:	b29b      	uxth	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3208      	adds	r2, #8
 800056c:	68b9      	ldr	r1, [r7, #8]
 800056e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800057c:	b480      	push	{r7}
 800057e:	b089      	sub	sp, #36	; 0x24
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
 8000590:	2302      	movs	r3, #2
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	2302      	movs	r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800059c:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	d011      	beq.n	80005d0 <RCC_GetClocksFreq+0x54>
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	2b08      	cmp	r3, #8
 80005b0:	d844      	bhi.n	800063c <RCC_GetClocksFreq+0xc0>
 80005b2:	69bb      	ldr	r3, [r7, #24]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d003      	beq.n	80005c0 <RCC_GetClocksFreq+0x44>
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d004      	beq.n	80005c8 <RCC_GetClocksFreq+0x4c>
 80005be:	e03d      	b.n	800063c <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a42      	ldr	r2, [pc, #264]	; (80006cc <RCC_GetClocksFreq+0x150>)
 80005c4:	601a      	str	r2, [r3, #0]
    break;
 80005c6:	e03d      	b.n	8000644 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a41      	ldr	r2, [pc, #260]	; (80006d0 <RCC_GetClocksFreq+0x154>)
 80005cc:	601a      	str	r2, [r3, #0]
    break;
 80005ce:	e039      	b.n	8000644 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005d0:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	0d9b      	lsrs	r3, r3, #22
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005dc:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005e4:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <RCC_GetClocksFreq+0x154>)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f4:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 80005f6:	6852      	ldr	r2, [r2, #4]
 80005f8:	0992      	lsrs	r2, r2, #6
 80005fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	61fb      	str	r3, [r7, #28]
 8000604:	e00b      	b.n	800061e <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000606:	4a31      	ldr	r2, [pc, #196]	; (80006cc <RCC_GetClocksFreq+0x150>)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4a2e      	ldr	r2, [pc, #184]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 8000610:	6852      	ldr	r2, [r2, #4]
 8000612:	0992      	lsrs	r2, r2, #6
 8000614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	f003 0303 	and.w	r3, r3, #3
 8000628:	3301      	adds	r3, #1
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800062e:	69fa      	ldr	r2, [r7, #28]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	fbb2 f2f3 	udiv	r2, r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]
    break;
 800063a:	e003      	b.n	8000644 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <RCC_GetClocksFreq+0x150>)
 8000640:	601a      	str	r2, [r3, #0]
    break;
 8000642:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800064c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000654:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <RCC_GetClocksFreq+0x158>)
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	40da      	lsrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000674:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	0a9b      	lsrs	r3, r3, #10
 800067a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800067c:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <RCC_GetClocksFreq+0x158>)
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	40da      	lsrs	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <RCC_GetClocksFreq+0x14c>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800069c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	0b5b      	lsrs	r3, r3, #13
 80006a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <RCC_GetClocksFreq+0x158>)
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	40da      	lsrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]
}
 80006bc:	bf00      	nop
 80006be:	3724      	adds	r7, #36	; 0x24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	00f42400 	.word	0x00f42400
 80006d0:	017d7840 	.word	0x017d7840
 80006d4:	20000014 	.word	0x20000014

080006d8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <RCC_AHB1PeriphClockCmd+0x38>)
 80006ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ee:	4908      	ldr	r1, [pc, #32]	; (8000710 <RCC_AHB1PeriphClockCmd+0x38>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006f6:	e006      	b.n	8000706 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <RCC_AHB1PeriphClockCmd+0x38>)
 80006fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	43db      	mvns	r3, r3
 8000700:	4903      	ldr	r1, [pc, #12]	; (8000710 <RCC_AHB1PeriphClockCmd+0x38>)
 8000702:	4013      	ands	r3, r2
 8000704:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40023800 	.word	0x40023800

08000714 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 8000728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4313      	orrs	r3, r2
 8000730:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000732:	e006      	b.n	8000742 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 8000736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	43db      	mvns	r3, r3
 800073c:	4903      	ldr	r1, [pc, #12]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 800073e:	4013      	ands	r3, r2
 8000740:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40023800 	.word	0x40023800

08000750 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	8a1b      	ldrh	r3, [r3, #16]
 800076e:	b29b      	uxth	r3, r3
 8000770:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	88db      	ldrh	r3, [r3, #6]
 800077e:	461a      	mov	r2, r3
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	4313      	orrs	r3, r2
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	b29a      	uxth	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	899b      	ldrh	r3, [r3, #12]
 8000792:	b29b      	uxth	r3, r3
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800079c:	f023 030c 	bic.w	r3, r3, #12
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	889a      	ldrh	r2, [r3, #4]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	891b      	ldrh	r3, [r3, #8]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	4313      	orrs	r3, r2
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	8a9b      	ldrh	r3, [r3, #20]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	461a      	mov	r2, r3
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	4313      	orrs	r3, r2
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fec4 	bl	800057c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <USART_Init+0x168>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d003      	beq.n	8000804 <USART_Init+0xb4>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2f      	ldr	r2, [pc, #188]	; (80008bc <USART_Init+0x16c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d102      	bne.n	800080a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	623b      	str	r3, [r7, #32]
 8000808:	e001      	b.n	800080e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	899b      	ldrh	r3, [r3, #12]
 8000812:	b29b      	uxth	r3, r3
 8000814:	b21b      	sxth	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	da0c      	bge.n	8000834 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800081a:	6a3a      	ldr	r2, [r7, #32]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	009a      	lsls	r2, r3, #2
 8000824:	441a      	add	r2, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e00b      	b.n	800084c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000834:	6a3a      	ldr	r2, [r7, #32]
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	009a      	lsls	r2, r3, #2
 800083e:	441a      	add	r2, r3
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <USART_Init+0x170>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	095b      	lsrs	r3, r3, #5
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	2264      	movs	r2, #100	; 0x64
 8000860:	fb02 f303 	mul.w	r3, r2, r3
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	899b      	ldrh	r3, [r3, #12]
 800086e:	b29b      	uxth	r3, r3
 8000870:	b21b      	sxth	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	da0c      	bge.n	8000890 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	3332      	adds	r3, #50	; 0x32
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <USART_Init+0x170>)
 800087e:	fba2 2303 	umull	r2, r3, r2, r3
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800088a:	4313      	orrs	r3, r2
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
 800088e:	e00b      	b.n	80008a8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	3332      	adds	r3, #50	; 0x32
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <USART_Init+0x170>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	095b      	lsrs	r3, r3, #5
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a4:	4313      	orrs	r3, r2
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	811a      	strh	r2, [r3, #8]
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40011400 	.word	0x40011400
 80008c0:	51eb851f 	.word	0x51eb851f

080008c4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	899b      	ldrh	r3, [r3, #12]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80008e6:	e007      	b.n	80008f8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	899b      	ldrh	r3, [r3, #12]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	819a      	strh	r2, [r3, #12]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	460b      	mov	r3, r1
 800090c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	809a      	strh	r2, [r3, #4]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	889b      	ldrh	r3, [r3, #4]
 8000930:	b29b      	uxth	r3, r3
 8000932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000936:	b29b      	uxth	r3, r3
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000942:	b480      	push	{r7}
 8000944:	b087      	sub	sp, #28
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	b2db      	uxtb	r3, r3
 8000966:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000968:	887b      	ldrh	r3, [r7, #2]
 800096a:	f003 031f 	and.w	r3, r3, #31
 800096e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000970:	2201      	movs	r2, #1
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d107      	bne.n	8000990 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	899b      	ldrh	r3, [r3, #12]
 8000984:	b29b      	uxth	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	4013      	ands	r3, r2
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e011      	b.n	80009b4 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d107      	bne.n	80009a6 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	8a1b      	ldrh	r3, [r3, #16]
 800099a:	b29b      	uxth	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	4013      	ands	r3, r2
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e006      	b.n	80009b4 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	8a9b      	ldrh	r3, [r3, #20]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4013      	ands	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80009bc:	2201      	movs	r2, #1
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <USART_GetITStatus+0xa4>
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80009e0:	2301      	movs	r3, #1
 80009e2:	74fb      	strb	r3, [r7, #19]
 80009e4:	e001      	b.n	80009ea <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80009ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000a02:	2300      	movs	r3, #0
 8000a04:	81fb      	strh	r3, [r7, #14]
 8000a06:	2300      	movs	r3, #0
 8000a08:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	2201      	movs	r2, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000a1a:	89bb      	ldrh	r3, [r7, #12]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	801a      	strh	r2, [r3, #0]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SysTick_Handler+0x18>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a03      	ldr	r2, [pc, #12]	; (8000a48 <SysTick_Handler+0x18>)
 8000a3c:	6013      	str	r3, [r2, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000040 	.word	0x20000040

08000a4c <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a52:	b672      	cpsid	i
}
 8000a54:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000a56:	f240 5125 	movw	r1, #1317	; 0x525
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <USART2_IRQHandler+0x4c>)
 8000a5c:	f7ff ff71 	bl	8000942 <USART_GetITStatus>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d112      	bne.n	8000a8c <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <USART2_IRQHandler+0x50>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <USART2_IRQHandler+0x4c>)
 8000a6e:	f7ff ff59 	bl	8000924 <USART_ReceiveData>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000a78:	1cfb      	adds	r3, r7, #3
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 f821 	bl	8000ac4 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000a82:	f240 5125 	movw	r1, #1317	; 0x525
 8000a86:	4804      	ldr	r0, [pc, #16]	; (8000a98 <USART2_IRQHandler+0x4c>)
 8000a88:	f7ff ffb5 	bl	80009f6 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000a8c:	b662      	cpsie	i
}
 8000a8e:	bf00      	nop
    }
    __enable_irq();
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	20000044 	.word	0x20000044

08000aa0 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	885a      	ldrh	r2, [r3, #2]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	bf2c      	ite	cs
 8000ab4:	2301      	movcs	r3, #1
 8000ab6:	2300      	movcc	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ace:	b672      	cpsid	i
}
 8000ad0:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e021      	b.n	8000b1c <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	441a      	add	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	88c9      	ldrh	r1, [r1, #6]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	88db      	ldrh	r3, [r3, #6]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4013      	ands	r3, r2
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	885b      	ldrh	r3, [r3, #2]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	7bfa      	ldrb	r2, [r7, #15]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3d8      	bcc.n	8000ad8 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffba 	bl	8000aa0 <bufIsFull>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d011      	beq.n	8000b56 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	891a      	ldrh	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b56:	b662      	cpsie	i
}
 8000b58:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <main>:
/******************************************************************************/

/******************************************************************************/

int main(void_t)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8000b68:	f7ff fb62 	bl	8000230 <SystemCoreClockUpdate>
	USART6_TX_Init();
 8000b6c:	f000 f80a 	bl	8000b84 <USART6_TX_Init>

	while(1)
	{

		USART_SendData(USART6, 0x10);
 8000b70:	2110      	movs	r1, #16
 8000b72:	4803      	ldr	r0, [pc, #12]	; (8000b80 <main+0x1c>)
 8000b74:	f7ff fec5 	bl	8000902 <USART_SendData>
		delayms();
 8000b78:	f000 f842 	bl	8000c00 <delayms>
		USART_SendData(USART6, 0x10);
 8000b7c:	e7f8      	b.n	8000b70 <main+0xc>
 8000b7e:	bf00      	nop
 8000b80:	40011400 	.word	0x40011400

08000b84 <USART6_TX_Init>:
 * @param  None
 * @retval None
 */
static
void USART6_TX_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;


	RCC_AHB1PeriphClockCmd(USART6_GPIO_Clock, ENABLE);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f7ff fda3 	bl	80006d8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000b92:	2302      	movs	r3, #2
 8000b94:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b96:	2300      	movs	r3, #0
 8000b98:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	75fb      	strb	r3, [r7, #23]

	GPIO_InitStructure.GPIO_Pin = USART6_TX;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	613b      	str	r3, [r7, #16]
	GPIO_Init(USART6_GPIO, &GPIO_InitStructure);
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <USART6_TX_Init+0x74>)
 8000bae:	f7ff fc0f 	bl	80003d0 <GPIO_Init>

	GPIO_PinAFConfig(USART6_GPIO, GPIO_PinSource6, GPIO_AF_USART6);
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	2106      	movs	r1, #6
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <USART6_TX_Init+0x74>)
 8000bb8:	f7ff fc98 	bl	80004ec <GPIO_PinAFConfig>

// Configure USART
	RCC_APB2PeriphClockCmd(USART6_CLOCK, ENABLE);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2020      	movs	r0, #32
 8000bc0:	f7ff fda8 	bl	8000714 <RCC_APB2PeriphClockCmd>

	USART_InitStructure.USART_BaudRate = USARTx_Baud;
 8000bc4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bc8:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Tx;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	817b      	strh	r3, [r7, #10]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	80fb      	strh	r3, [r7, #6]

	USART_Init(USART6, &USART_InitStructure);
 8000bde:	463b      	mov	r3, r7
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <USART6_TX_Init+0x78>)
 8000be4:	f7ff fdb4 	bl	8000750 <USART_Init>
	USART_Cmd(USART6, ENABLE);
 8000be8:	2101      	movs	r1, #1
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <USART6_TX_Init+0x78>)
 8000bec:	f7ff fe6a 	bl	80008c4 <USART_Cmd>

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40011400 	.word	0x40011400

08000c00 <delayms>:
void delayms() {
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	for (u32_t i = 0; i < 500000; i++);
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	e002      	b.n	8000c12 <delayms+0x12>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <delayms+0x28>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d9f8      	bls.n	8000c0c <delayms+0xc>
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	0007a11f 	.word	0x0007a11f

08000c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c30:	f7ff fad0 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopForever+0xe>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopForever+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c5a:	f000 f811 	bl	8000c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5e:	f7ff ff81 	bl	8000b64 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   r0, =_estack
 8000c64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000c70:	08000ce8 	.word	0x08000ce8
  ldr r2, =_sbss
 8000c74:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c78:	2000004c 	.word	0x2000004c

08000c7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <__libc_init_array>:
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	4d0d      	ldr	r5, [pc, #52]	; (8000cb8 <__libc_init_array+0x38>)
 8000c84:	4c0d      	ldr	r4, [pc, #52]	; (8000cbc <__libc_init_array+0x3c>)
 8000c86:	1b64      	subs	r4, r4, r5
 8000c88:	10a4      	asrs	r4, r4, #2
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	42a6      	cmp	r6, r4
 8000c8e:	d109      	bne.n	8000ca4 <__libc_init_array+0x24>
 8000c90:	4d0b      	ldr	r5, [pc, #44]	; (8000cc0 <__libc_init_array+0x40>)
 8000c92:	4c0c      	ldr	r4, [pc, #48]	; (8000cc4 <__libc_init_array+0x44>)
 8000c94:	f000 f818 	bl	8000cc8 <_init>
 8000c98:	1b64      	subs	r4, r4, r5
 8000c9a:	10a4      	asrs	r4, r4, #2
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	42a6      	cmp	r6, r4
 8000ca0:	d105      	bne.n	8000cae <__libc_init_array+0x2e>
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
 8000ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca8:	4798      	blx	r3
 8000caa:	3601      	adds	r6, #1
 8000cac:	e7ee      	b.n	8000c8c <__libc_init_array+0xc>
 8000cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb2:	4798      	blx	r3
 8000cb4:	3601      	adds	r6, #1
 8000cb6:	e7f2      	b.n	8000c9e <__libc_init_array+0x1e>
 8000cb8:	08000ce0 	.word	0x08000ce0
 8000cbc:	08000ce0 	.word	0x08000ce0
 8000cc0:	08000ce0 	.word	0x08000ce0
 8000cc4:	08000ce4 	.word	0x08000ce4

08000cc8 <_init>:
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cca:	bf00      	nop
 8000ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cce:	bc08      	pop	{r3}
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	4770      	bx	lr

08000cd4 <_fini>:
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	bf00      	nop
 8000cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cda:	bc08      	pop	{r3}
 8000cdc:	469e      	mov	lr, r3
 8000cde:	4770      	bx	lr
