
bai-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000093c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ad0  08000ad0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ad0  08000ad0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000ad0  08000ad0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ad0  08000ad0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad0  08000ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ad4  08000ad4  00010ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000014  08000aec  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000aec  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061e0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001143  00000000  00000000  0002621e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00027368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  00027b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bcf6  00000000  00000000  000282b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056bb  00000000  00000000  00033fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000436a3  00000000  00000000  00039661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007cd04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000228c  00000000  00000000  0007cd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ab8 	.word	0x08000ab8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08000ab8 	.word	0x08000ab8

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <SystemInit+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a11      	ldr	r2, [pc, #68]	; (8000224 <SystemInit+0x50>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <SystemInit+0x50>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <SystemInit+0x50>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <SystemInit+0x50>)
 80001f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <SystemInit+0x50>)
 80001fc:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <SystemInit+0x54>)
 80001fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <SystemInit+0x50>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <SystemInit+0x50>)
 8000206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <SystemInit+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000212:	f000 f88d 	bl	8000330 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	24003010 	.word	0x24003010
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	2302      	movs	r3, #2
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024a:	4b34      	ldr	r3, [pc, #208]	; (800031c <SystemCoreClockUpdate+0xec>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	f003 030c 	and.w	r3, r3, #12
 8000252:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	2b08      	cmp	r3, #8
 8000258:	d011      	beq.n	800027e <SystemCoreClockUpdate+0x4e>
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	2b08      	cmp	r3, #8
 800025e:	d844      	bhi.n	80002ea <SystemCoreClockUpdate+0xba>
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d003      	beq.n	800026e <SystemCoreClockUpdate+0x3e>
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	2b04      	cmp	r3, #4
 800026a:	d004      	beq.n	8000276 <SystemCoreClockUpdate+0x46>
 800026c:	e03d      	b.n	80002ea <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800026e:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000270:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e03d      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000278:	4a2b      	ldr	r2, [pc, #172]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800027a:	601a      	str	r2, [r3, #0]
      break;
 800027c:	e039      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <SystemCoreClockUpdate+0xec>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	0d9b      	lsrs	r3, r3, #22
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SystemCoreClockUpdate+0xec>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000292:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00c      	beq.n	80002b4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029a:	4a23      	ldr	r2, [pc, #140]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a2:	4a1e      	ldr	r2, [pc, #120]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002a4:	6852      	ldr	r2, [r2, #4]
 80002a6:	0992      	lsrs	r2, r2, #6
 80002a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	e00b      	b.n	80002cc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	4a17      	ldr	r2, [pc, #92]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002be:	6852      	ldr	r2, [r2, #4]
 80002c0:	0992      	lsrs	r2, r2, #6
 80002c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002c6:	fb02 f303 	mul.w	r3, r2, r3
 80002ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	0c1b      	lsrs	r3, r3, #16
 80002d2:	f003 0303 	and.w	r3, r3, #3
 80002d6:	3301      	adds	r3, #1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002e6:	6013      	str	r3, [r2, #0]
      break;
 80002e8:	e003      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	091b      	lsrs	r3, r3, #4
 80002f8:	f003 030f 	and.w	r3, r3, #15
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SystemCoreClockUpdate+0xfc>)
 80002fe:	5cd3      	ldrb	r3, [r2, r3]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	fa22 f303 	lsr.w	r3, r2, r3
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	bf00      	nop
 8000314:	371c      	adds	r7, #28
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40023800 	.word	0x40023800
 8000320:	20000000 	.word	0x20000000
 8000324:	00f42400 	.word	0x00f42400
 8000328:	017d7840 	.word	0x017d7840
 800032c:	20000004 	.word	0x20000004

08000330 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <SetSysClock+0x90>)
 8000336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000338:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <SetSysClock+0x90>)
 800033a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <SetSysClock+0x94>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <SetSysClock+0x94>)
 8000346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800034a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000356:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <SetSysClock+0x90>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <SetSysClock+0x90>)
 8000362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000366:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <SetSysClock+0x90>)
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <SetSysClock+0x98>)
 800036c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <SetSysClock+0x90>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <SetSysClock+0x90>)
 8000374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000378:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800037a:	bf00      	nop
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <SetSysClock+0x90>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <SetSysClock+0x9c>)
 800038a:	f240 6202 	movw	r2, #1538	; 0x602
 800038e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <SetSysClock+0x90>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <SetSysClock+0x90>)
 8000396:	f023 0303 	bic.w	r3, r3, #3
 800039a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <SetSysClock+0x90>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <SetSysClock+0x90>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003a8:	bf00      	nop
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <SetSysClock+0x90>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	f003 030c 	and.w	r3, r3, #12
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	d1f9      	bne.n	80003aa <SetSysClock+0x7a>
}
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40023800 	.word	0x40023800
 80003c4:	40007000 	.word	0x40007000
 80003c8:	08015410 	.word	0x08015410
 80003cc:	40023c00 	.word	0x40023c00

080003d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b087      	sub	sp, #28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	e076      	b.n	80004da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003ec:	2201      	movs	r2, #1
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	4013      	ands	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	429a      	cmp	r2, r3
 8000406:	d165      	bne.n	80004d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	2103      	movs	r1, #3
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43db      	mvns	r3, r3
 8000418:	401a      	ands	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	4619      	mov	r1, r3
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	431a      	orrs	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d003      	beq.n	8000446 <GPIO_Init+0x76>
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d12e      	bne.n	80004a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689a      	ldr	r2, [r3, #8]
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	401a      	ands	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689a      	ldr	r2, [r3, #8]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	4619      	mov	r1, r3
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	b29b      	uxth	r3, r3
 800047c:	4619      	mov	r1, r3
 800047e:	2301      	movs	r3, #1
 8000480:	408b      	lsls	r3, r1
 8000482:	43db      	mvns	r3, r3
 8000484:	401a      	ands	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	7992      	ldrb	r2, [r2, #6]
 8000492:	4611      	mov	r1, r2
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	b292      	uxth	r2, r2
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	b292      	uxth	r2, r2
 800049e:	431a      	orrs	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	68da      	ldr	r2, [r3, #12]
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2103      	movs	r1, #3
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	401a      	ands	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	79db      	ldrb	r3, [r3, #7]
 80004c4:	4619      	mov	r1, r3
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	431a      	orrs	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	3301      	adds	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	2b0f      	cmp	r3, #15
 80004de:	d985      	bls.n	80003ec <GPIO_Init+0x1c>
    }
  }
}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	371c      	adds	r7, #28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	887a      	ldrh	r2, [r7, #2]
 80004fc:	831a      	strh	r2, [r3, #24]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	887a      	ldrh	r2, [r7, #2]
 8000518:	835a      	strh	r2, [r3, #26]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d006      	beq.n	8000544 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <RCC_AHB1PeriphClockCmd+0x38>)
 8000538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800053a:	4908      	ldr	r1, [pc, #32]	; (800055c <RCC_AHB1PeriphClockCmd+0x38>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000542:	e006      	b.n	8000552 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <RCC_AHB1PeriphClockCmd+0x38>)
 8000546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	43db      	mvns	r3, r3
 800054c:	4903      	ldr	r1, [pc, #12]	; (800055c <RCC_AHB1PeriphClockCmd+0x38>)
 800054e:	4013      	ands	r3, r2
 8000550:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40023800 	.word	0x40023800

08000560 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d006      	beq.n	8000580 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <RCC_APB2PeriphClockCmd+0x38>)
 8000574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000576:	4908      	ldr	r1, [pc, #32]	; (8000598 <RCC_APB2PeriphClockCmd+0x38>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800057e:	e006      	b.n	800058e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <RCC_APB2PeriphClockCmd+0x38>)
 8000582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	43db      	mvns	r3, r3
 8000588:	4903      	ldr	r1, [pc, #12]	; (8000598 <RCC_APB2PeriphClockCmd+0x38>)
 800058a:	4013      	ands	r3, r2
 800058c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40023800 	.word	0x40023800

0800059c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a28      	ldr	r2, [pc, #160]	; (8000654 <TIM_TimeBaseInit+0xb8>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d013      	beq.n	80005e0 <TIM_TimeBaseInit+0x44>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a27      	ldr	r2, [pc, #156]	; (8000658 <TIM_TimeBaseInit+0xbc>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d00f      	beq.n	80005e0 <TIM_TimeBaseInit+0x44>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005c6:	d00b      	beq.n	80005e0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a24      	ldr	r2, [pc, #144]	; (800065c <TIM_TimeBaseInit+0xc0>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d007      	beq.n	80005e0 <TIM_TimeBaseInit+0x44>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a23      	ldr	r2, [pc, #140]	; (8000660 <TIM_TimeBaseInit+0xc4>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d003      	beq.n	80005e0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <TIM_TimeBaseInit+0xc8>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d108      	bne.n	80005f2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80005e0:	89fb      	ldrh	r3, [r7, #14]
 80005e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005e6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	885a      	ldrh	r2, [r3, #2]
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <TIM_TimeBaseInit+0xcc>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d00c      	beq.n	8000614 <TIM_TimeBaseInit+0x78>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <TIM_TimeBaseInit+0xd0>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d008      	beq.n	8000614 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000608:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	891a      	ldrh	r2, [r3, #8]
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	4313      	orrs	r3, r2
 8000612:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	89fa      	ldrh	r2, [r7, #14]
 8000618:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <TIM_TimeBaseInit+0xb8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d003      	beq.n	800063a <TIM_TimeBaseInit+0x9e>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a08      	ldr	r2, [pc, #32]	; (8000658 <TIM_TimeBaseInit+0xbc>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d104      	bne.n	8000644 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	7a9b      	ldrb	r3, [r3, #10]
 800063e:	b29a      	uxth	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2201      	movs	r2, #1
 8000648:	829a      	strh	r2, [r3, #20]
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40010000 	.word	0x40010000
 8000658:	40010400 	.word	0x40010400
 800065c:	40000400 	.word	0x40000400
 8000660:	40000800 	.word	0x40000800
 8000664:	40000c00 	.word	0x40000c00
 8000668:	40001000 	.word	0x40001000
 800066c:	40001400 	.word	0x40001400

08000670 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d008      	beq.n	80006c4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	b29a      	uxth	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80006c2:	e007      	b.n	80006d4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	f023 0301 	bic.w	r3, r3, #1
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	801a      	strh	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	889b      	ldrh	r3, [r3, #4]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006f0:	b29b      	uxth	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b087      	sub	sp, #28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000714:	2300      	movs	r3, #0
 8000716:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	095b      	lsrs	r3, r3, #5
 800071e:	b2db      	uxtb	r3, r3
 8000720:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000722:	887b      	ldrh	r3, [r7, #2]
 8000724:	f003 031f 	and.w	r3, r3, #31
 8000728:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800072a:	2201      	movs	r2, #1
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d107      	bne.n	800074a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	b29b      	uxth	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	4013      	ands	r3, r2
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e011      	b.n	800076e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d107      	bne.n	8000760 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	8a1b      	ldrh	r3, [r3, #16]
 8000754:	b29b      	uxth	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4013      	ands	r3, r2
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	e006      	b.n	800076e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	8a9b      	ldrh	r3, [r3, #20]
 8000764:	b29b      	uxth	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4013      	ands	r3, r2
 800076c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800076e:	887b      	ldrh	r3, [r7, #2]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000776:	2201      	movs	r2, #1
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d005      	beq.n	80007a0 <USART_GetITStatus+0xa4>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800079a:	2301      	movs	r3, #1
 800079c:	74fb      	strb	r3, [r7, #19]
 800079e:	e001      	b.n	80007a4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80007bc:	2300      	movs	r3, #0
 80007be:	81fb      	strh	r3, [r7, #14]
 80007c0:	2300      	movs	r3, #0
 80007c2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	2201      	movs	r2, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80007d4:	89bb      	ldrh	r3, [r7, #12]
 80007d6:	43db      	mvns	r3, r3
 80007d8:	b29a      	uxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	801a      	strh	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SysTick_Handler+0x18>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a03      	ldr	r2, [pc, #12]	; (8000800 <SysTick_Handler+0x18>)
 80007f4:	6013      	str	r3, [r2, #0]
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000030 	.word	0x20000030

08000804 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080a:	b672      	cpsid	i
}
 800080c:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 800080e:	f240 5125 	movw	r1, #1317	; 0x525
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <USART2_IRQHandler+0x4c>)
 8000814:	f7ff ff72 	bl	80006fc <USART_GetITStatus>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d112      	bne.n	8000844 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <USART2_IRQHandler+0x50>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <USART2_IRQHandler+0x4c>)
 8000826:	f7ff ff5a 	bl	80006de <USART_ReceiveData>
 800082a:	4603      	mov	r3, r0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000830:	1cfb      	adds	r3, r7, #3
 8000832:	4619      	mov	r1, r3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 f821 	bl	800087c <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800083a:	f240 5125 	movw	r1, #1317	; 0x525
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <USART2_IRQHandler+0x4c>)
 8000840:	f7ff ffb6 	bl	80007b0 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000844:	b662      	cpsie	i
}
 8000846:	bf00      	nop
    }
    __enable_irq();
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	20000034 	.word	0x20000034

08000858 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	885a      	ldrh	r2, [r3, #2]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	429a      	cmp	r2, r3
 800086a:	bf2c      	ite	cs
 800086c:	2301      	movcs	r3, #1
 800086e:	2300      	movcc	r3, #0
 8000870:	b2db      	uxtb	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000886:	b672      	cpsid	i
}
 8000888:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	e021      	b.n	80008d4 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	441a      	add	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	88c9      	ldrh	r1, [r1, #6]
 800089e:	440b      	add	r3, r1
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	88db      	ldrh	r3, [r3, #6]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	4013      	ands	r3, r2
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	885b      	ldrh	r3, [r3, #2]
 80008c6:	3301      	adds	r3, #1
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	3301      	adds	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3d8      	bcc.n	8000890 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffba 	bl	8000858 <bufIsFull>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d011      	beq.n	800090e <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	891a      	ldrh	r2, [r3, #8]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	b29b      	uxth	r3, r3
 8000902:	b21b      	sxth	r3, r3
 8000904:	4013      	ands	r3, r2
 8000906:	b21b      	sxth	r3, r3
 8000908:	b29a      	uxth	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800090e:	b662      	cpsie	i
}
 8000910:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <main>:
static void AppInitCommont(void);
void Led_Init(void);
void Timer_init(void);
void delay(uint32_t ms);
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	AppInitCommont();
 8000920:	f000 f814 	bl	800094c <AppInitCommont>

	while(1)
		{
			GPIO_SetBits(LED_GREEN_PORT, LED_GREEN_PIN);
 8000924:	2101      	movs	r1, #1
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <main+0x2c>)
 8000928:	f7ff fde0 	bl	80004ec <GPIO_SetBits>
			delay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000930:	f000 f854 	bl	80009dc <delay>

			GPIO_ResetBits(LED_GREEN_PORT, LED_GREEN_PIN);
 8000934:	2101      	movs	r1, #1
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <main+0x2c>)
 8000938:	f7ff fde6 	bl	8000508 <GPIO_ResetBits>

			delay(1000);
 800093c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000940:	f000 f84c 	bl	80009dc <delay>
			GPIO_SetBits(LED_GREEN_PORT, LED_GREEN_PIN);
 8000944:	e7ee      	b.n	8000924 <main+0x8>
 8000946:	bf00      	nop
 8000948:	40020000 	.word	0x40020000

0800094c <AppInitCommont>:
		}
}

static void AppInitCommont(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8000950:	f7ff fc6e 	bl	8000230 <SystemCoreClockUpdate>
	Led_Init();
 8000954:	f000 f804 	bl	8000960 <Led_Init>
	Timer_init();
 8000958:	f000 f81e 	bl	8000998 <Timer_init>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <Led_Init>:

void Led_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000966:	2101      	movs	r1, #1
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fddb 	bl	8000524 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800096e:	2301      	movs	r3, #1
 8000970:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000972:	2300      	movs	r3, #0
 8000974:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000976:	2302      	movs	r3, #2
 8000978:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800097a:	2302      	movs	r3, #2
 800097c:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStruct.GPIO_Pin = LED_GREEN_PIN;
 800097e:	2301      	movs	r3, #1
 8000980:	603b      	str	r3, [r7, #0]
	GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 8000982:	463b      	mov	r3, r7
 8000984:	4619      	mov	r1, r3
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <Led_Init+0x34>)
 8000988:	f7ff fd22 	bl	80003d0 <GPIO_Init>

}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020000 	.word	0x40020000

08000998 <Timer_init>:

void Timer_init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef Timer_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800099e:	2101      	movs	r1, #1
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff fddd 	bl	8000560 <RCC_APB2PeriphClockCmd>

	Timer_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	81bb      	strh	r3, [r7, #12]

	Timer_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80009aa:	2300      	movs	r3, #0
 80009ac:	80fb      	strh	r3, [r7, #6]

	Timer_InitStructure.TIM_Period = 999;
 80009ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80009b2:	60bb      	str	r3, [r7, #8]

	Timer_InitStructure.TIM_Prescaler = 83;
 80009b4:	2353      	movs	r3, #83	; 0x53
 80009b6:	80bb      	strh	r3, [r7, #4]

	Timer_InitStructure.TIM_RepetitionCounter = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM1, &Timer_InitStructure);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <Timer_init+0x40>)
 80009c2:	f7ff fdeb 	bl	800059c <TIM_TimeBaseInit>
	TIM_Cmd(TIM1, ENABLE);
 80009c6:	2101      	movs	r1, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <Timer_init+0x40>)
 80009ca:	f7ff fe69 	bl	80006a0 <TIM_Cmd>

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40010000 	.word	0x40010000

080009dc <delay>:

void delay(uint32_t ms)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	while(ms !=  0 )
 80009e4:	e00f      	b.n	8000a06 <delay+0x2a>
	{
		TIM_SetCounter(TIM1, 0);
 80009e6:	2100      	movs	r1, #0
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <delay+0x3c>)
 80009ea:	f7ff fe41 	bl	8000670 <TIM_SetCounter>
		while(TIM_GetCounter(TIM1) != 999){};
 80009ee:	bf00      	nop
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <delay+0x3c>)
 80009f2:	f7ff fe4a 	bl	800068a <TIM_GetCounter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d1f7      	bne.n	80009f0 <delay+0x14>
			ms--;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
	while(ms !=  0 )
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1ec      	bne.n	80009e6 <delay+0xa>
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010000 	.word	0x40010000

08000a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a20:	f7ff fbd8 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	; (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	; (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a4a:	f000 f811 	bl	8000a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff ff65 	bl	800091c <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a60:	08000ad8 	.word	0x08000ad8
  ldr r2, =_sbss
 8000a64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a68:	2000003c 	.word	0x2000003c

08000a6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <__libc_init_array>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	4d0d      	ldr	r5, [pc, #52]	; (8000aa8 <__libc_init_array+0x38>)
 8000a74:	4c0d      	ldr	r4, [pc, #52]	; (8000aac <__libc_init_array+0x3c>)
 8000a76:	1b64      	subs	r4, r4, r5
 8000a78:	10a4      	asrs	r4, r4, #2
 8000a7a:	2600      	movs	r6, #0
 8000a7c:	42a6      	cmp	r6, r4
 8000a7e:	d109      	bne.n	8000a94 <__libc_init_array+0x24>
 8000a80:	4d0b      	ldr	r5, [pc, #44]	; (8000ab0 <__libc_init_array+0x40>)
 8000a82:	4c0c      	ldr	r4, [pc, #48]	; (8000ab4 <__libc_init_array+0x44>)
 8000a84:	f000 f818 	bl	8000ab8 <_init>
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	10a4      	asrs	r4, r4, #2
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	42a6      	cmp	r6, r4
 8000a90:	d105      	bne.n	8000a9e <__libc_init_array+0x2e>
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
 8000a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a98:	4798      	blx	r3
 8000a9a:	3601      	adds	r6, #1
 8000a9c:	e7ee      	b.n	8000a7c <__libc_init_array+0xc>
 8000a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa2:	4798      	blx	r3
 8000aa4:	3601      	adds	r6, #1
 8000aa6:	e7f2      	b.n	8000a8e <__libc_init_array+0x1e>
 8000aa8:	08000ad0 	.word	0x08000ad0
 8000aac:	08000ad0 	.word	0x08000ad0
 8000ab0:	08000ad0 	.word	0x08000ad0
 8000ab4:	08000ad4 	.word	0x08000ad4

08000ab8 <_init>:
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aba:	bf00      	nop
 8000abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000abe:	bc08      	pop	{r3}
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	4770      	bx	lr

08000ac4 <_fini>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	bf00      	nop
 8000ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aca:	bc08      	pop	{r3}
 8000acc:	469e      	mov	lr, r3
 8000ace:	4770      	bx	lr
