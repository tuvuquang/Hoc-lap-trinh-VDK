
bai-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000438  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005cc  080005d4  000105d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005cc  080005cc  000105d4  2**0
                  CONTENTS
  4 .ARM          00000000  080005cc  080005cc  000105d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005cc  080005d4  000105d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005cc  080005cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080005d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005d4  00020028  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000105d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029b9  00000000  00000000  000105fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a66  00000000  00000000  00012fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00013a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  00013cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a8e1  00000000  00000000  00013f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c01  00000000  00000000  0001e809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003d690  00000000  00000000  0002140a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0005ea9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009f8  00000000  00000000  0005eaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005b4 	.word	0x080005b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005b4 	.word	0x080005b4

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <SystemInit+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a11      	ldr	r2, [pc, #68]	; (8000224 <SystemInit+0x50>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <SystemInit+0x50>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <SystemInit+0x50>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <SystemInit+0x50>)
 80001f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <SystemInit+0x50>)
 80001fc:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <SystemInit+0x54>)
 80001fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <SystemInit+0x50>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <SystemInit+0x50>)
 8000206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <SystemInit+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000212:	f000 f80d 	bl	8000230 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	24003010 	.word	0x24003010
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <SetSysClock+0x90>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000238:	4a21      	ldr	r2, [pc, #132]	; (80002c0 <SetSysClock+0x90>)
 800023a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800023e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000240:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <SetSysClock+0x94>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a1f      	ldr	r2, [pc, #124]	; (80002c4 <SetSysClock+0x94>)
 8000246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800024a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800024c:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <SetSysClock+0x90>)
 800024e:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <SetSysClock+0x90>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <SetSysClock+0x90>)
 8000256:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <SetSysClock+0x90>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <SetSysClock+0x90>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <SetSysClock+0x90>)
 8000262:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000266:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000268:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <SetSysClock+0x90>)
 800026a:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <SetSysClock+0x98>)
 800026c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <SetSysClock+0x90>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <SetSysClock+0x90>)
 8000274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000278:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800027a:	bf00      	nop
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <SetSysClock+0x90>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f9      	beq.n	800027c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <SetSysClock+0x9c>)
 800028a:	f240 6202 	movw	r2, #1538	; 0x602
 800028e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <SetSysClock+0x90>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <SetSysClock+0x90>)
 8000296:	f023 0303 	bic.w	r3, r3, #3
 800029a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <SetSysClock+0x90>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <SetSysClock+0x90>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002a8:	bf00      	nop
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <SetSysClock+0x90>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	f003 030c 	and.w	r3, r3, #12
 80002b2:	2b08      	cmp	r3, #8
 80002b4:	d1f9      	bne.n	80002aa <SetSysClock+0x7a>
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40007000 	.word	0x40007000
 80002c8:	08015410 	.word	0x08015410
 80002cc:	40023c00 	.word	0x40023c00

080002d0 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	889b      	ldrh	r3, [r3, #4]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr

080002ee <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b087      	sub	sp, #28
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000306:	2300      	movs	r3, #0
 8000308:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800030a:	887b      	ldrh	r3, [r7, #2]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	095b      	lsrs	r3, r3, #5
 8000310:	b2db      	uxtb	r3, r3
 8000312:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000314:	887b      	ldrh	r3, [r7, #2]
 8000316:	f003 031f 	and.w	r3, r3, #31
 800031a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800031c:	2201      	movs	r2, #1
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	fa02 f303 	lsl.w	r3, r2, r3
 8000324:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d107      	bne.n	800033c <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	899b      	ldrh	r3, [r3, #12]
 8000330:	b29b      	uxth	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4013      	ands	r3, r2
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	e011      	b.n	8000360 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d107      	bne.n	8000352 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	8a1b      	ldrh	r3, [r3, #16]
 8000346:	b29b      	uxth	r3, r3
 8000348:	461a      	mov	r2, r3
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	4013      	ands	r3, r2
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e006      	b.n	8000360 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	8a9b      	ldrh	r3, [r3, #20]
 8000356:	b29b      	uxth	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	4013      	ands	r3, r2
 800035e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000360:	887b      	ldrh	r3, [r7, #2]
 8000362:	0a1b      	lsrs	r3, r3, #8
 8000364:	b29b      	uxth	r3, r3
 8000366:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000368:	2201      	movs	r2, #1
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	fa02 f303 	lsl.w	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	b29b      	uxth	r3, r3
 8000378:	461a      	mov	r2, r3
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	4013      	ands	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d005      	beq.n	8000392 <USART_GetITStatus+0xa4>
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800038c:	2301      	movs	r3, #1
 800038e:	74fb      	strb	r3, [r7, #19]
 8000390:	e001      	b.n	8000396 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000392:	2300      	movs	r3, #0
 8000394:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000396:	7cfb      	ldrb	r3, [r7, #19]
}
 8000398:	4618      	mov	r0, r3
 800039a:	371c      	adds	r7, #28
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b085      	sub	sp, #20
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	460b      	mov	r3, r1
 80003ac:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80003ae:	2300      	movs	r3, #0
 80003b0:	81fb      	strh	r3, [r7, #14]
 80003b2:	2300      	movs	r3, #0
 80003b4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80003b6:	887b      	ldrh	r3, [r7, #2]
 80003b8:	0a1b      	lsrs	r3, r3, #8
 80003ba:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80003bc:	89fb      	ldrh	r3, [r7, #14]
 80003be:	2201      	movs	r2, #1
 80003c0:	fa02 f303 	lsl.w	r3, r2, r3
 80003c4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80003c6:	89bb      	ldrh	r3, [r7, #12]
 80003c8:	43db      	mvns	r3, r3
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	801a      	strh	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
	...

080003dc <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SysTick_Handler+0x18>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	4a03      	ldr	r2, [pc, #12]	; (80003f4 <SysTick_Handler+0x18>)
 80003e8:	6013      	str	r3, [r2, #0]
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2000001c 	.word	0x2000001c

080003f8 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fe:	b672      	cpsid	i
}
 8000400:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000402:	f240 5125 	movw	r1, #1317	; 0x525
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <USART2_IRQHandler+0x4c>)
 8000408:	f7ff ff71 	bl	80002ee <USART_GetITStatus>
 800040c:	4603      	mov	r3, r0
 800040e:	2b01      	cmp	r3, #1
 8000410:	d112      	bne.n	8000438 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <USART2_IRQHandler+0x50>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000418:	480a      	ldr	r0, [pc, #40]	; (8000444 <USART2_IRQHandler+0x4c>)
 800041a:	f7ff ff59 	bl	80002d0 <USART_ReceiveData>
 800041e:	4603      	mov	r3, r0
 8000420:	b2db      	uxtb	r3, r3
 8000422:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000424:	1cfb      	adds	r3, r7, #3
 8000426:	4619      	mov	r1, r3
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 f821 	bl	8000470 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800042e:	f240 5125 	movw	r1, #1317	; 0x525
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <USART2_IRQHandler+0x4c>)
 8000434:	f7ff ffb5 	bl	80003a2 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000438:	b662      	cpsie	i
}
 800043a:	bf00      	nop
    }
    __enable_irq();
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40004400 	.word	0x40004400
 8000448:	20000020 	.word	0x20000020

0800044c <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	885a      	ldrh	r2, [r3, #2]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	bf2c      	ite	cs
 8000460:	2301      	movcs	r3, #1
 8000462:	2300      	movcc	r3, #0
 8000464:	b2db      	uxtb	r3, r3
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800047a:	b672      	cpsid	i
}
 800047c:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800047e:	2300      	movs	r3, #0
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	e021      	b.n	80004c8 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	441a      	add	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	6879      	ldr	r1, [r7, #4]
 8000490:	88c9      	ldrh	r1, [r1, #6]
 8000492:	440b      	add	r3, r1
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	88db      	ldrh	r3, [r3, #6]
 800049c:	3301      	adds	r3, #1
 800049e:	b29b      	uxth	r3, r3
 80004a0:	b21a      	sxth	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	b21b      	sxth	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b21b      	sxth	r3, r3
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	885b      	ldrh	r3, [r3, #2]
 80004ba:	3301      	adds	r3, #1
 80004bc:	b29a      	uxth	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	3301      	adds	r3, #1
 80004c6:	73fb      	strb	r3, [r7, #15]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	7bfa      	ldrb	r2, [r7, #15]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d3d8      	bcc.n	8000484 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff ffba 	bl	800044c <bufIsFull>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d011      	beq.n	8000502 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	891a      	ldrh	r2, [r3, #8]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4413      	add	r3, r2
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	b21a      	sxth	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	4013      	ands	r3, r2
 80004fa:	b21b      	sxth	r3, r3
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000502:	b662      	cpsie	i
}
 8000504:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 8000514:	e7fe      	b.n	8000514 <main+0x4>
	...

08000518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800051c:	f7ff fe5a 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000546:	f000 f811 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff ffe1 	bl	8000510 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800055c:	080005d4 	.word	0x080005d4
  ldr r2, =_sbss
 8000560:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000564:	20000028 	.word	0x20000028

08000568 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC_IRQHandler>
	...

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	4d0d      	ldr	r5, [pc, #52]	; (80005a4 <__libc_init_array+0x38>)
 8000570:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000572:	1b64      	subs	r4, r4, r5
 8000574:	10a4      	asrs	r4, r4, #2
 8000576:	2600      	movs	r6, #0
 8000578:	42a6      	cmp	r6, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	4d0b      	ldr	r5, [pc, #44]	; (80005ac <__libc_init_array+0x40>)
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <__libc_init_array+0x44>)
 8000580:	f000 f818 	bl	80005b4 <_init>
 8000584:	1b64      	subs	r4, r4, r5
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	2600      	movs	r6, #0
 800058a:	42a6      	cmp	r6, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f855 3b04 	ldr.w	r3, [r5], #4
 8000594:	4798      	blx	r3
 8000596:	3601      	adds	r6, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f855 3b04 	ldr.w	r3, [r5], #4
 800059e:	4798      	blx	r3
 80005a0:	3601      	adds	r6, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005cc 	.word	0x080005cc
 80005a8:	080005cc 	.word	0x080005cc
 80005ac:	080005cc 	.word	0x080005cc
 80005b0:	080005d0 	.word	0x080005d0

080005b4 <_init>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr
