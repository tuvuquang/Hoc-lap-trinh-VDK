
bai-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010c8  080010c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010c8  080010c8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080010c8  080010c8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c8  080010c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c8  080010c8  000110c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010cc  080010cc  000110cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080010d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000014  080010e4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080010e4  00020040  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058c6  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d5  00000000  00000000  00025904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00026ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00027338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bef5  00000000  00000000  000278e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005576  00000000  00000000  000337dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004084e  00000000  00000000  00038d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000795a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a28  00000000  00000000  000795f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010b0 	.word	0x080010b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080010b0 	.word	0x080010b0

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <SystemInit+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a11      	ldr	r2, [pc, #68]	; (8000224 <SystemInit+0x50>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <SystemInit+0x50>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <SystemInit+0x50>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <SystemInit+0x50>)
 80001f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <SystemInit+0x50>)
 80001fc:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <SystemInit+0x54>)
 80001fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <SystemInit+0x50>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <SystemInit+0x50>)
 8000206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <SystemInit+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000212:	f000 f88d 	bl	8000330 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <SystemInit+0x58>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	24003010 	.word	0x24003010
 800022c:	e000ed00 	.word	0xe000ed00

08000230 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	2302      	movs	r3, #2
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800024a:	4b34      	ldr	r3, [pc, #208]	; (800031c <SystemCoreClockUpdate+0xec>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	f003 030c 	and.w	r3, r3, #12
 8000252:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	2b08      	cmp	r3, #8
 8000258:	d011      	beq.n	800027e <SystemCoreClockUpdate+0x4e>
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	2b08      	cmp	r3, #8
 800025e:	d844      	bhi.n	80002ea <SystemCoreClockUpdate+0xba>
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d003      	beq.n	800026e <SystemCoreClockUpdate+0x3e>
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	2b04      	cmp	r3, #4
 800026a:	d004      	beq.n	8000276 <SystemCoreClockUpdate+0x46>
 800026c:	e03d      	b.n	80002ea <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800026e:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000270:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e03d      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000278:	4a2b      	ldr	r2, [pc, #172]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800027a:	601a      	str	r2, [r3, #0]
      break;
 800027c:	e039      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <SystemCoreClockUpdate+0xec>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	0d9b      	lsrs	r3, r3, #22
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <SystemCoreClockUpdate+0xec>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000292:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00c      	beq.n	80002b4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800029a:	4a23      	ldr	r2, [pc, #140]	; (8000328 <SystemCoreClockUpdate+0xf8>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a2:	4a1e      	ldr	r2, [pc, #120]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002a4:	6852      	ldr	r2, [r2, #4]
 80002a6:	0992      	lsrs	r2, r2, #6
 80002a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	e00b      	b.n	80002cc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	4a17      	ldr	r2, [pc, #92]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002be:	6852      	ldr	r2, [r2, #4]
 80002c0:	0992      	lsrs	r2, r2, #6
 80002c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002c6:	fb02 f303 	mul.w	r3, r2, r3
 80002ca:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	0c1b      	lsrs	r3, r3, #16
 80002d2:	f003 0303 	and.w	r3, r3, #3
 80002d6:	3301      	adds	r3, #1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002e6:	6013      	str	r3, [r2, #0]
      break;
 80002e8:	e003      	b.n	80002f2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <SystemCoreClockUpdate+0xf4>)
 80002ee:	601a      	str	r2, [r3, #0]
      break;
 80002f0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <SystemCoreClockUpdate+0xec>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	091b      	lsrs	r3, r3, #4
 80002f8:	f003 030f 	and.w	r3, r3, #15
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SystemCoreClockUpdate+0xfc>)
 80002fe:	5cd3      	ldrb	r3, [r2, r3]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	fa22 f303 	lsr.w	r3, r2, r3
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <SystemCoreClockUpdate+0xf0>)
 8000310:	6013      	str	r3, [r2, #0]
}
 8000312:	bf00      	nop
 8000314:	371c      	adds	r7, #28
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40023800 	.word	0x40023800
 8000320:	20000000 	.word	0x20000000
 8000324:	00f42400 	.word	0x00f42400
 8000328:	017d7840 	.word	0x017d7840
 800032c:	20000004 	.word	0x20000004

08000330 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <SetSysClock+0x90>)
 8000336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000338:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <SetSysClock+0x90>)
 800033a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <SetSysClock+0x94>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <SetSysClock+0x94>)
 8000346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800034a:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <SetSysClock+0x90>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000354:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000356:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <SetSysClock+0x90>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <SetSysClock+0x90>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <SetSysClock+0x90>)
 8000362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000366:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <SetSysClock+0x90>)
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <SetSysClock+0x98>)
 800036c:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <SetSysClock+0x90>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <SetSysClock+0x90>)
 8000374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000378:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800037a:	bf00      	nop
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <SetSysClock+0x90>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <SetSysClock+0x9c>)
 800038a:	f240 6202 	movw	r2, #1538	; 0x602
 800038e:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <SetSysClock+0x90>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <SetSysClock+0x90>)
 8000396:	f023 0303 	bic.w	r3, r3, #3
 800039a:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <SetSysClock+0x90>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <SetSysClock+0x90>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003a8:	bf00      	nop
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <SetSysClock+0x90>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	f003 030c 	and.w	r3, r3, #12
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	d1f9      	bne.n	80003aa <SetSysClock+0x7a>
}
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40023800 	.word	0x40023800
 80003c4:	40007000 	.word	0x40007000
 80003c8:	08015410 	.word	0x08015410
 80003cc:	40023c00 	.word	0x40023c00

080003d0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]
 80003dc:	2300      	movs	r3, #0
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	230f      	movs	r3, #15
 80003e2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	78db      	ldrb	r3, [r3, #3]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d039      	beq.n	8000460 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80003ec:	4b27      	ldr	r3, [pc, #156]	; (800048c <NVIC_Init+0xbc>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	43db      	mvns	r3, r3
 80003f2:	0a1b      	lsrs	r3, r3, #8
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	f1c3 0304 	rsb	r3, r3, #4
 8000402:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000404:	7b7a      	ldrb	r2, [r7, #13]
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	fa42 f303 	asr.w	r3, r2, r3
 800040c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	785b      	ldrb	r3, [r3, #1]
 8000412:	461a      	mov	r2, r3
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	fa02 f303 	lsl.w	r3, r2, r3
 800041a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	789a      	ldrb	r2, [r3, #2]
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	4013      	ands	r3, r2
 8000424:	b2da      	uxtb	r2, r3
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	4313      	orrs	r3, r2
 800042a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000432:	4a17      	ldr	r2, [pc, #92]	; (8000490 <NVIC_Init+0xc0>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4413      	add	r3, r2
 800043a:	7bfa      	ldrb	r2, [r7, #15]
 800043c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000448:	4911      	ldr	r1, [pc, #68]	; (8000490 <NVIC_Init+0xc0>)
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	7812      	ldrb	r2, [r2, #0]
 800044e:	0952      	lsrs	r2, r2, #5
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000454:	2201      	movs	r2, #1
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800045a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800045e:	e00f      	b.n	8000480 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000468:	4909      	ldr	r1, [pc, #36]	; (8000490 <NVIC_Init+0xc0>)
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	7812      	ldrb	r2, [r2, #0]
 800046e:	0952      	lsrs	r2, r2, #5
 8000470:	b2d2      	uxtb	r2, r2
 8000472:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000474:	2201      	movs	r2, #1
 8000476:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000478:	f100 0320 	add.w	r3, r0, #32
 800047c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	e000e100 	.word	0xe000e100

08000494 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000494:	b480      	push	{r7}
 8000496:	b087      	sub	sp, #28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	e076      	b.n	800059e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004b0:	2201      	movs	r2, #1
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d165      	bne.n	8000598 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	2103      	movs	r1, #3
 80004d6:	fa01 f303 	lsl.w	r3, r1, r3
 80004da:	43db      	mvns	r3, r3
 80004dc:	401a      	ands	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	4619      	mov	r1, r3
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	431a      	orrs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d003      	beq.n	800050a <GPIO_Init+0x76>
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d12e      	bne.n	8000568 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	401a      	ands	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	4619      	mov	r1, r3
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	b29b      	uxth	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	2301      	movs	r3, #1
 8000544:	408b      	lsls	r3, r1
 8000546:	43db      	mvns	r3, r3
 8000548:	401a      	ands	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	7992      	ldrb	r2, [r2, #6]
 8000556:	4611      	mov	r1, r2
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	b292      	uxth	r2, r2
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	b292      	uxth	r2, r2
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	b29b      	uxth	r3, r3
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	2103      	movs	r1, #3
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	43db      	mvns	r3, r3
 800057a:	401a      	ands	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	79db      	ldrb	r3, [r3, #7]
 8000588:	4619      	mov	r1, r3
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	431a      	orrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	3301      	adds	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d985      	bls.n	80004b0 <GPIO_Init+0x1c>
    }
  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	887a      	ldrh	r2, [r7, #2]
 80005c0:	831a      	strh	r2, [r3, #24]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
 80005d8:	4613      	mov	r3, r2
 80005da:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e4:	787a      	ldrb	r2, [r7, #1]
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3208      	adds	r2, #8
 8000600:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	210f      	movs	r1, #15
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	8879      	ldrh	r1, [r7, #2]
 8000616:	08c9      	lsrs	r1, r1, #3
 8000618:	b289      	uxth	r1, r1
 800061a:	4608      	mov	r0, r1
 800061c:	ea02 0103 	and.w	r1, r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f100 0208 	add.w	r2, r0, #8
 8000626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	b29b      	uxth	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3208      	adds	r2, #8
 8000636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	4313      	orrs	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	b29b      	uxth	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3208      	adds	r2, #8
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <RCC_AHB1PeriphClockCmd+0x38>)
 8000670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000672:	4908      	ldr	r1, [pc, #32]	; (8000694 <RCC_AHB1PeriphClockCmd+0x38>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4313      	orrs	r3, r2
 8000678:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800067a:	e006      	b.n	800068a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <RCC_AHB1PeriphClockCmd+0x38>)
 800067e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	43db      	mvns	r3, r3
 8000684:	4903      	ldr	r1, [pc, #12]	; (8000694 <RCC_AHB1PeriphClockCmd+0x38>)
 8000686:	4013      	ands	r3, r2
 8000688:	630b      	str	r3, [r1, #48]	; 0x30
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40023800 	.word	0x40023800

08000698 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <RCC_APB1PeriphClockCmd+0x38>)
 80006ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <RCC_APB1PeriphClockCmd+0x38>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006b6:	e006      	b.n	80006c6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <RCC_APB1PeriphClockCmd+0x38>)
 80006ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	43db      	mvns	r3, r3
 80006c0:	4903      	ldr	r1, [pc, #12]	; (80006d0 <RCC_APB1PeriphClockCmd+0x38>)
 80006c2:	4013      	ands	r3, r2
 80006c4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <RCC_APB2PeriphClockCmd+0x38>)
 80006e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006ea:	4908      	ldr	r1, [pc, #32]	; (800070c <RCC_APB2PeriphClockCmd+0x38>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006f2:	e006      	b.n	8000702 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <RCC_APB2PeriphClockCmd+0x38>)
 80006f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4903      	ldr	r1, [pc, #12]	; (800070c <RCC_APB2PeriphClockCmd+0x38>)
 80006fe:	4013      	ands	r3, r2
 8000700:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40023800 	.word	0x40023800

08000710 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800072a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	881a      	ldrh	r2, [r3, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	885b      	ldrh	r3, [r3, #2]
 8000734:	4313      	orrs	r3, r2
 8000736:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800073c:	4313      	orrs	r3, r2
 800073e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000744:	4313      	orrs	r3, r2
 8000746:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800074c:	4313      	orrs	r3, r2
 800074e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000754:	4313      	orrs	r3, r2
 8000756:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800075c:	4313      	orrs	r3, r2
 800075e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000764:	4313      	orrs	r3, r2
 8000766:	b29a      	uxth	r2, r3
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	4313      	orrs	r3, r2
 800076c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	89fa      	ldrh	r2, [r7, #14]
 8000772:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	8b9b      	ldrh	r3, [r3, #28]
 8000778:	b29b      	uxth	r3, r3
 800077a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800077e:	b29a      	uxth	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	8a1a      	ldrh	r2, [r3, #16]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	821a      	strh	r2, [r3, #16]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80007b8:	e007      	b.n	80007ca <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	801a      	strh	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	899b      	ldrh	r3, [r3, #12]
 80007e0:	b29b      	uxth	r3, r3
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	887a      	ldrh	r2, [r7, #2]
 80007fc:	819a      	strh	r2, [r3, #12]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
 8000814:	4613      	mov	r3, r2
 8000816:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8000818:	2300      	movs	r3, #0
 800081a:	81fb      	strh	r3, [r7, #14]
 800081c:	2300      	movs	r3, #0
 800081e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	091b      	lsrs	r3, r3, #4
 8000824:	b2db      	uxtb	r3, r3
 8000826:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000828:	89fb      	ldrh	r3, [r7, #14]
 800082a:	2201      	movs	r2, #1
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8000832:	78bb      	ldrb	r3, [r7, #2]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d008      	beq.n	800084a <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	889b      	ldrh	r3, [r3, #4]
 800083c:	b29a      	uxth	r2, r3
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	4313      	orrs	r3, r2
 8000842:	b29a      	uxth	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8000848:	e009      	b.n	800085e <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	889b      	ldrh	r3, [r3, #4]
 800084e:	b29a      	uxth	r2, r3
 8000850:	89bb      	ldrh	r3, [r7, #12]
 8000852:	43db      	mvns	r3, r3
 8000854:	b29b      	uxth	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	b29a      	uxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	809a      	strh	r2, [r3, #4]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	891b      	ldrh	r3, [r3, #8]
 800087c:	b29a      	uxth	r2, r3
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	4013      	ands	r3, r2
 8000882:	b29b      	uxth	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e001      	b.n	8000892 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800089e:	b480      	push	{r7}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	460b      	mov	r3, r1
 80008a8:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	81bb      	strh	r3, [r7, #12]
 80008b2:	2300      	movs	r3, #0
 80008b4:	817b      	strh	r3, [r7, #10]
 80008b6:	2300      	movs	r3, #0
 80008b8:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	f003 030f 	and.w	r3, r3, #15
 80008c0:	2201      	movs	r2, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	2201      	movs	r2, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	889b      	ldrh	r3, [r3, #4]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	897b      	ldrh	r3, [r7, #10]
 80008e2:	4013      	ands	r3, r2
 80008e4:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	891b      	ldrh	r3, [r3, #8]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	89bb      	ldrh	r3, [r7, #12]
 80008ee:	4013      	ands	r3, r2
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d005      	beq.n	8000902 <SPI_I2S_GetITStatus+0x64>
 80008f6:	893b      	ldrh	r3, [r7, #8]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80008fc:	2301      	movs	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	e001      	b.n	8000906 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000912:	b480      	push	{r7}
 8000914:	b085      	sub	sp, #20
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	f003 030f 	and.w	r3, r3, #15
 8000928:	2201      	movs	r2, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	43db      	mvns	r3, r3
 8000934:	b29a      	uxth	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	811a      	strh	r2, [r3, #8]
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	889b      	ldrh	r3, [r3, #4]
 8000950:	b29b      	uxth	r3, r3
 8000952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000956:	b29b      	uxth	r3, r3
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000962:	b480      	push	{r7}
 8000964:	b087      	sub	sp, #28
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	b2db      	uxtb	r3, r3
 8000986:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000988:	887b      	ldrh	r3, [r7, #2]
 800098a:	f003 031f 	and.w	r3, r3, #31
 800098e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000990:	2201      	movs	r2, #1
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d107      	bne.n	80009b0 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	899b      	ldrh	r3, [r3, #12]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	4013      	ands	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e011      	b.n	80009d4 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d107      	bne.n	80009c6 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	8a1b      	ldrh	r3, [r3, #16]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	4013      	ands	r3, r2
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e006      	b.n	80009d4 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	8a9b      	ldrh	r3, [r3, #20]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	4013      	ands	r3, r2
 80009d2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b29b      	uxth	r3, r3
 80009da:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80009dc:	2201      	movs	r2, #1
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d005      	beq.n	8000a06 <USART_GetITStatus+0xa4>
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000a00:	2301      	movs	r3, #1
 8000a02:	74fb      	strb	r3, [r7, #19]
 8000a04:	e001      	b.n	8000a0a <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	81fb      	strh	r3, [r7, #14]
 8000a26:	2300      	movs	r3, #0
 8000a28:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000a30:	89fb      	ldrh	r3, [r7, #14]
 8000a32:	2201      	movs	r2, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	801a      	strh	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
	...

08000a50 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SysTick_Handler+0x18>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <SysTick_Handler+0x18>)
 8000a5c:	6013      	str	r3, [r2, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000030 	.word	0x20000030

08000a6c <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a72:	b672      	cpsid	i
}
 8000a74:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000a76:	f240 5125 	movw	r1, #1317	; 0x525
 8000a7a:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <USART2_IRQHandler+0x4c>)
 8000a7c:	f7ff ff71 	bl	8000962 <USART_GetITStatus>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d112      	bne.n	8000aac <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <USART2_IRQHandler+0x50>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <USART2_IRQHandler+0x4c>)
 8000a8e:	f7ff ff59 	bl	8000944 <USART_ReceiveData>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000a98:	1cfb      	adds	r3, r7, #3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f821 	bl	8000ae4 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000aa2:	f240 5125 	movw	r1, #1317	; 0x525
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <USART2_IRQHandler+0x4c>)
 8000aa8:	f7ff ffb5 	bl	8000a16 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aac:	b662      	cpsie	i
}
 8000aae:	bf00      	nop
    }
    __enable_irq();
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	20000034 	.word	0x20000034

08000ac0 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	885a      	ldrh	r2, [r3, #2]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	bf2c      	ite	cs
 8000ad4:	2301      	movcs	r3, #1
 8000ad6:	2300      	movcc	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000aee:	b672      	cpsid	i
}
 8000af0:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e021      	b.n	8000b3c <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	441a      	add	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	88c9      	ldrh	r1, [r1, #6]
 8000b06:	440b      	add	r3, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	88db      	ldrh	r3, [r3, #6]
 8000b10:	3301      	adds	r3, #1
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4013      	ands	r3, r2
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	885b      	ldrh	r3, [r3, #2]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	7bfa      	ldrb	r2, [r7, #15]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3d8      	bcc.n	8000af8 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffba 	bl	8000ac0 <bufIsFull>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d011      	beq.n	8000b76 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	891a      	ldrh	r2, [r3, #8]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b76:	b662      	cpsie	i
}
 8000b78:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <main>:
static void GPIO_PinControl(GPIO_TypeDef *GPIOx, uint8_t GPIO_PIN, uint8_t Status);
static void Delay(uint32_t ms);
static void Revice_Data_Master(SPI_TypeDef *SPIx, uint16_t *My_Data);

int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	AppInitCommon();
 8000b8a:	f000 fa35 	bl	8000ff8 <AppInitCommon>
	while(1)
	{
	//Send data when Button pressed-----------------------------------------
		if(GPIO_Read_Pin(GPIOC, Pin_Button) == 0)
 8000b8e:	210d      	movs	r1, #13
 8000b90:	4822      	ldr	r0, [pc, #136]	; (8000c1c <main+0x98>)
 8000b92:	f000 f9c9 	bl	8000f28 <GPIO_Read_Pin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d103      	bne.n	8000ba4 <main+0x20>
		{
			Send_Data(SPI2, 0xB1);
 8000b9c:	21b1      	movs	r1, #177	; 0xb1
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <main+0x9c>)
 8000ba0:	f000 f968 	bl	8000e74 <Send_Data>
		}
		//Turn on led when data = 0x20------------------------------------------
		if (Recive_Data == Check_DataSlave)
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <main+0xa0>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2bb1      	cmp	r3, #177	; 0xb1
 8000baa:	d130      	bne.n	8000c0e <main+0x8a>
		{
			for (int i = 0; i<5; i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	e014      	b.n	8000bdc <main+0x58>
			{
				GPIO_PinControl(GPIOA, Pin_Led, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	481c      	ldr	r0, [pc, #112]	; (8000c28 <main+0xa4>)
 8000bb8:	f000 f92c 	bl	8000e14 <GPIO_PinControl>
				Delay(1000);
 8000bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc0:	f000 f838 	bl	8000c34 <Delay>
				GPIO_PinControl(GPIOA, Pin_Led, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4817      	ldr	r0, [pc, #92]	; (8000c28 <main+0xa4>)
 8000bca:	f000 f923 	bl	8000e14 <GPIO_PinControl>
				Delay(1000);
 8000bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd2:	f000 f82f 	bl	8000c34 <Delay>
			for (int i = 0; i<5; i++)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	dde7      	ble.n	8000bb2 <main+0x2e>
			}
			Recive_Data = 0;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <main+0xa0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]

			Send_Data(SPI1, 0x43);
 8000be8:	2143      	movs	r1, #67	; 0x43
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <main+0xa8>)
 8000bec:	f000 f942 	bl	8000e74 <Send_Data>

			Revice_Data_Master(SPI2, &Recive_Data_Master);
 8000bf0:	490f      	ldr	r1, [pc, #60]	; (8000c30 <main+0xac>)
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <main+0x9c>)
 8000bf4:	f000 f972 	bl	8000edc <Revice_Data_Master>
			if(Recive_Data_Master == 0x43)
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <main+0xac>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	2b43      	cmp	r3, #67	; 0x43
 8000bfe:	d106      	bne.n	8000c0e <main+0x8a>
			{
				GPIO_SetBits(GPIOA, Led_Board);
 8000c00:	2102      	movs	r1, #2
 8000c02:	4809      	ldr	r0, [pc, #36]	; (8000c28 <main+0xa4>)
 8000c04:	f7ff fcd4 	bl	80005b0 <GPIO_SetBits>
				Recive_Data_Master = 0;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <main+0xac>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	801a      	strh	r2, [r3, #0]
			}

		}
		GPIO_PinControl(GPIOA, Pin_Led, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <main+0xa4>)
 8000c14:	f000 f8fe 	bl	8000e14 <GPIO_PinControl>
		if(GPIO_Read_Pin(GPIOC, Pin_Button) == 0)
 8000c18:	e7b9      	b.n	8000b8e <main+0xa>
 8000c1a:	bf00      	nop
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40003800 	.word	0x40003800
 8000c24:	2000003c 	.word	0x2000003c
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	2000003e 	.word	0x2000003e

08000c34 <Delay>:
 * @param  None
 * @retval None
 */
static
void Delay(uint32_t ms)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for (i = 0 ; i < ms ; i ++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e00d      	b.n	8000c5e <Delay+0x2a>
	{
		for (j = 0; j<5000; j++){;}
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	e002      	b.n	8000c4e <Delay+0x1a>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d9f7      	bls.n	8000c48 <Delay+0x14>
	for (i = 0 ; i < ms ; i ++)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d3ed      	bcc.n	8000c42 <Delay+0xe>
	}
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <SPI2_Master_Init>:
 * @brief  SPI_InitMaster
 * @param  None
 * @retval None
 */
static void SPI2_Master_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef	 SPI_InitStructure;


	// Connect Clock to GPIOB--------------------------------------------------
	RCC_AHB1PeriphClockCmd(SPI_Master_GPIO_Clock, ENABLE);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f7ff fced 	bl	800065c <RCC_AHB1PeriphClockCmd>

	// Initialization GPIO use for SPI-----------------------------------------

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000c82:	2302      	movs	r3, #2
 8000c84:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000c86:	2302      	movs	r3, #2
 8000c88:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	77bb      	strb	r3, [r7, #30]

	GPIO_InitStructure.GPIO_Pin = SCK_Master| MISO_Master | MOSI_Master;
 8000c8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c92:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Master_GPIO, &GPIO_InitStructure);
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <SPI2_Master_Init+0xb4>)
 8000c9c:	f7ff fbfa 	bl	8000494 <GPIO_Init>

	// Connect SPI1 pins to SPI Alternate function

	GPIO_PinAFConfig(SPI_Master_GPIO, GPIO_PinSource13, GPIO_AF_SPI2);
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	210d      	movs	r1, #13
 8000ca4:	4820      	ldr	r0, [pc, #128]	; (8000d28 <SPI2_Master_Init+0xb4>)
 8000ca6:	f7ff fc91 	bl	80005cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Master_GPIO, GPIO_PinSource14, GPIO_AF_SPI2);
 8000caa:	2205      	movs	r2, #5
 8000cac:	210e      	movs	r1, #14
 8000cae:	481e      	ldr	r0, [pc, #120]	; (8000d28 <SPI2_Master_Init+0xb4>)
 8000cb0:	f7ff fc8c 	bl	80005cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Master_GPIO, GPIO_PinSource15, GPIO_AF_SPI2);
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	481b      	ldr	r0, [pc, #108]	; (8000d28 <SPI2_Master_Init+0xb4>)
 8000cba:	f7ff fc87 	bl	80005cc <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = NSS_Master;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Master_GPIO, &GPIO_InitStructure);
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4813      	ldr	r0, [pc, #76]	; (8000d28 <SPI2_Master_Init+0xb4>)
 8000cdc:	f7ff fbda 	bl	8000494 <GPIO_Init>

	//Enable peripheral clock----------------------------------------------
	RCC_APB1PeriphClockCmd(SPI_Master_Clock, ENABLE);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ce6:	f7ff fcd7 	bl	8000698 <RCC_APB1PeriphClockCmd>

	//Set to full duplex mode, seperate MOSI and MISO----------------------
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000cea:	2300      	movs	r3, #0
 8000cec:	80bb      	strh	r3, [r7, #4]

	//Transmit in master mode----------------------------------------------
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000cee:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000cf2:	80fb      	strh	r3, [r7, #6]

	//one packet of data 8 bits wide---------------------------------------
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	813b      	strh	r3, [r7, #8]

	//Clock is low when idle-----------------------------------------------
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	817b      	strh	r3, [r7, #10]

	//Data sampled at first edge-------------------------------------------
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81bb      	strh	r3, [r7, #12]

	//Set NSS Software-----------------------------------------------------
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d04:	81fb      	strh	r3, [r7, #14]

	//SPI frequency	is APB2 frequency/4 -----------------------------------
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8000d06:	2308      	movs	r3, #8
 8000d08:	823b      	strh	r3, [r7, #16]

	//Data is transmitted LSB first----------------------------------------
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	827b      	strh	r3, [r7, #18]

	SPI_Init(SPI_Master, &SPI_InitStructure);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <SPI2_Master_Init+0xb8>)
 8000d14:	f7ff fcfc 	bl	8000710 <SPI_Init>

	//Enable SPI2----------------------------------------------------------
	SPI_Cmd(SPI_Master, ENABLE);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <SPI2_Master_Init+0xb8>)
 8000d1c:	f7ff fd3b 	bl	8000796 <SPI_Cmd>

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40003800 	.word	0x40003800

08000d30 <SPI1_Slave_Init>:
 * @brief  SPI_InitSlave
 * @param  None
 * @retval None
 */
static void SPI1_Slave_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef	 SPI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Connect Clock to GPIOB--------------------------------------------------
	RCC_AHB1PeriphClockCmd(SPI_Slave_GPIO_Clock, ENABLE);
 8000d36:	2101      	movs	r1, #1
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fc8f 	bl	800065c <RCC_AHB1PeriphClockCmd>

	// Initialization GPIO use for SPI-----------------------------------------

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d42:	2302      	movs	r3, #2
 8000d44:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d46:	2300      	movs	r3, #0
 8000d48:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = SCK_Slave | MISO_Slave | MOSI_Slave;
 8000d4e:	23e0      	movs	r3, #224	; 0xe0
 8000d50:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Slave_GPIO, &GPIO_InitStructure);
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4619      	mov	r1, r3
 8000d58:	482c      	ldr	r0, [pc, #176]	; (8000e0c <SPI1_Slave_Init+0xdc>)
 8000d5a:	f7ff fb9b 	bl	8000494 <GPIO_Init>

	// Connect SPI1 pins to SPI Alternate function

	GPIO_PinAFConfig(SPI_Slave_GPIO, GPIO_PinSource5, GPIO_AF_SPI1);
 8000d5e:	2205      	movs	r2, #5
 8000d60:	2105      	movs	r1, #5
 8000d62:	482a      	ldr	r0, [pc, #168]	; (8000e0c <SPI1_Slave_Init+0xdc>)
 8000d64:	f7ff fc32 	bl	80005cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Slave_GPIO, GPIO_PinSource6, GPIO_AF_SPI1);
 8000d68:	2205      	movs	r2, #5
 8000d6a:	2106      	movs	r1, #6
 8000d6c:	4827      	ldr	r0, [pc, #156]	; (8000e0c <SPI1_Slave_Init+0xdc>)
 8000d6e:	f7ff fc2d 	bl	80005cc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPI_Slave_GPIO, GPIO_PinSource7, GPIO_AF_SPI1);
 8000d72:	2205      	movs	r2, #5
 8000d74:	2107      	movs	r1, #7
 8000d76:	4825      	ldr	r0, [pc, #148]	; (8000e0c <SPI1_Slave_Init+0xdc>)
 8000d78:	f7ff fc28 	bl	80005cc <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d80:	2302      	movs	r3, #2
 8000d82:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	77fb      	strb	r3, [r7, #31]

	GPIO_InitStructure.GPIO_Pin = NSS_Slave;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	61bb      	str	r3, [r7, #24]
	GPIO_Init(SPI_Slave_GPIO, &GPIO_InitStructure);
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	4619      	mov	r1, r3
 8000d92:	481e      	ldr	r0, [pc, #120]	; (8000e0c <SPI1_Slave_Init+0xdc>)
 8000d94:	f7ff fb7e 	bl	8000494 <GPIO_Init>

	//Enable peripheral clock----------------------------------------------
	RCC_APB2PeriphClockCmd(SPI_Slave_Clock, ENABLE);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000d9e:	f7ff fc99 	bl	80006d4 <RCC_APB2PeriphClockCmd>

	//Set to full duplex mode, seperate MOSI and MISO----------------------
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000da2:	2300      	movs	r3, #0
 8000da4:	80bb      	strh	r3, [r7, #4]

	//Transmit in Slave mode----------------------------------------------
	SPI_InitStructure.SPI_Mode = SPI_Mode_Slave;
 8000da6:	2300      	movs	r3, #0
 8000da8:	80fb      	strh	r3, [r7, #6]

	//one packet of data 8 bits wide---------------------------------------
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8000daa:	2300      	movs	r3, #0
 8000dac:	813b      	strh	r3, [r7, #8]

	//Clock is low when idle-----------------------------------------------
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000dae:	2300      	movs	r3, #0
 8000db0:	817b      	strh	r3, [r7, #10]

	//Data sampled at first edge-------------------------------------------
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000db2:	2300      	movs	r3, #0
 8000db4:	81bb      	strh	r3, [r7, #12]

	//Set NSS Software-----------------------------------------------------
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dba:	81fb      	strh	r3, [r7, #14]

	//SPI frequency	is APB2 frequency/4 -----------------------------------
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	823b      	strh	r3, [r7, #16]

	//Data is transmitted LSB first----------------------------------------
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	827b      	strh	r3, [r7, #18]

	SPI_Init(SPI_Slave, &SPI_InitStructure);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <SPI1_Slave_Init+0xe0>)
 8000dca:	f7ff fca1 	bl	8000710 <SPI_Init>

	//Enable SPI1----------------------------------------------------------
	SPI_Cmd(SPI_Slave, ENABLE);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <SPI1_Slave_Init+0xe0>)
 8000dd2:	f7ff fce0 	bl	8000796 <SPI_Cmd>

	SPI_I2S_ITConfig(SPI_Slave, SPI_I2S_IT_RXNE, ENABLE);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2160      	movs	r1, #96	; 0x60
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <SPI1_Slave_Init+0xe0>)
 8000ddc:	f7ff fd14 	bl	8000808 <SPI_I2S_ITConfig>
	//NVIC configuration---------------------------------------------------
	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8000de0:	2323      	movs	r3, #35	; 0x23
 8000de2:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	70fb      	strb	r3, [r7, #3]

	NVIC_Init( &NVIC_InitStructure);
 8000df0:	463b      	mov	r3, r7
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff faec 	bl	80003d0 <NVIC_Init>

	SPI_I2S_ITConfig(SPI_Slave, SPI_I2S_IT_RXNE, ENABLE);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2160      	movs	r1, #96	; 0x60
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <SPI1_Slave_Init+0xe0>)
 8000dfe:	f7ff fd03 	bl	8000808 <SPI_I2S_ITConfig>
}
 8000e02:	bf00      	nop
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40013000 	.word	0x40013000

08000e14 <GPIO_PinControl>:
 * @param  None
 * @retval None
 */

static void GPIO_PinControl(GPIO_TypeDef *GPIOx, uint8_t GPIO_PIN,
		uint8_t Status) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
 8000e20:	4613      	mov	r3, r2
 8000e22:	70bb      	strb	r3, [r7, #2]
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d10d      	bne.n	8000e46 <GPIO_PinControl+0x32>
		GPIOx->BSRRL |= 1 << GPIO_PIN;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8b1b      	ldrh	r3, [r3, #24]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10d      	bne.n	8000e68 <GPIO_PinControl+0x54>
		GPIOx->BSRRH |= 1 << GPIO_PIN;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	8b5b      	ldrh	r3, [r3, #26]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	835a      	strh	r2, [r3, #26]
	}
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
	...

08000e74 <Send_Data>:
static
void Send_Data(SPI_TypeDef * SPIx, uint8_t data)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
	//Allow Send Data to Slave--------------------------------------------------
	GPIO_PinControl (SPI_Master_GPIO, Pin_NSS, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	210c      	movs	r1, #12
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <Send_Data+0x44>)
 8000e86:	f7ff ffc5 	bl	8000e14 <GPIO_PinControl>

	SPI_I2S_SendData(SPIx,data);
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fcab 	bl	80007ec <SPI_I2S_SendData>

	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET){;}
 8000e96:	bf00      	nop
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fce4 	bl	8000868 <SPI_I2S_GetFlagStatus>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d0f8      	beq.n	8000e98 <Send_Data+0x24>

	//Allow Send Data to Slave--------------------------------------------------
	GPIO_PinControl (SPI_Master_GPIO, Pin_NSS, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	210c      	movs	r1, #12
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <Send_Data+0x44>)
 8000eac:	f7ff ffb2 	bl	8000e14 <GPIO_PinControl>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020400 	.word	0x40020400

08000ebc <Revice_Data_Slave>:
 * @param  None
 * @retval None
 */
static
uint8_t Revice_Data_Slave(SPI_TypeDef * SPIx)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint8_t Data_Revice = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]

	Data_Revice = SPI_I2S_ReceiveData(SPIx);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fc83 	bl	80007d4 <SPI_I2S_ReceiveData>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]

	return Data_Revice;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <Revice_Data_Master>:

static void Revice_Data_Master(SPI_TypeDef *SPIx, uint16_t *My_Data)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	SPI2->DR &= 0xff;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <Revice_Data_Master+0x48>)
 8000ee8:	899b      	ldrh	r3, [r3, #12]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <Revice_Data_Master+0x48>)
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	819a      	strh	r2, [r3, #12]
	Delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f7ff fe9d 	bl	8000c34 <Delay>
	*My_Data = SPI_I2S_ReceiveData(SPIx);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fc6a 	bl	80007d4 <SPI_I2S_ReceiveData>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	801a      	strh	r2, [r3, #0]

	while(SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY)== SET)
 8000f08:	bf00      	nop
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fcab 	bl	8000868 <SPI_I2S_GetFlagStatus>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d0f8      	beq.n	8000f0a <Revice_Data_Master+0x2e>
		{;}
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40003800 	.word	0x40003800

08000f28 <GPIO_Read_Pin>:
 * @param  None
 * @retval None
 */
static
uint8_t GPIO_Read_Pin(GPIO_TypeDef * GPIOx, uint32_t GPIO_PIN)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	uint32_t Read_Pin;

	//Read bit in IDR Registers-------------------------------------------------
	Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3c:	60fb      	str	r3, [r7, #12]
	Read_Pin = Read_Pin & 0x01;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]

	return Read_Pin;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	b2db      	uxtb	r3, r3
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <SPI1_IRQHandler>:
 * @brief  SPI1_IRQHandler
 * @param  None
 * @retval None
 */
void SPI1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if(SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) == SET)
 8000f58:	2160      	movs	r1, #96	; 0x60
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <SPI1_IRQHandler+0x2c>)
 8000f5c:	f7ff fc9f 	bl	800089e <SPI_I2S_GetITStatus>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d106      	bne.n	8000f74 <SPI1_IRQHandler+0x20>
	{
		Recive_Data = Revice_Data_Slave(SPI1);
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <SPI1_IRQHandler+0x2c>)
 8000f68:	f7ff ffa8 	bl	8000ebc <Revice_Data_Slave>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SPI1_IRQHandler+0x30>)
 8000f72:	701a      	strb	r2, [r3, #0]
	}
	SPI_I2S_ClearITPendingBit(SPI1, SPI_I2S_IT_RXNE);
 8000f74:	2160      	movs	r1, #96	; 0x60
 8000f76:	4802      	ldr	r0, [pc, #8]	; (8000f80 <SPI1_IRQHandler+0x2c>)
 8000f78:	f7ff fccb 	bl	8000912 <SPI_I2S_ClearITPendingBit>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40013000 	.word	0x40013000
 8000f84:	2000003c 	.word	0x2000003c

08000f88 <Led_init>:
 * @brief  Led_Init
 * @param  None
 * @retval None
 */
static void Led_init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fb63 	bl	800065c <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = Led | Led_Board ;
 8000f96:	2303      	movs	r3, #3
 8000f98:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <Led_init+0x34>)
 8000fb0:	f7ff fa70 	bl	8000494 <GPIO_Init>

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <Button_init>:
 * @brief  Button_Init
 * @param  None
 * @retval None
 */
static void Button_init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2004      	movs	r0, #4
 8000fca:	f7ff fb47 	bl	800065c <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = Button;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	603b      	str	r3, [r7, #0]

	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <Button_init+0x34>)
 8000fe6:	f7ff fa55 	bl	8000494 <GPIO_Init>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <AppInitCommon>:

static
void AppInitCommon(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8000ffc:	f7ff f918 	bl	8000230 <SystemCoreClockUpdate>

	Button_init();
 8001000:	f7ff ffde 	bl	8000fc0 <Button_init>

	Led_init();
 8001004:	f7ff ffc0 	bl	8000f88 <Led_init>

	SPI2_Master_Init();
 8001008:	f7ff fe34 	bl	8000c74 <SPI2_Master_Init>

	SPI1_Slave_Init();
 800100c:	f7ff fe90 	bl	8000d30 <SPI1_Slave_Init>


}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff f8dc 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001042:	f000 f811 	bl	8001068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff fd9d 	bl	8000b84 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001058:	080010d0 	.word	0x080010d0
  ldr r2, =_sbss
 800105c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001060:	20000040 	.word	0x20000040

08001064 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <__libc_init_array>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4d0d      	ldr	r5, [pc, #52]	; (80010a0 <__libc_init_array+0x38>)
 800106c:	4c0d      	ldr	r4, [pc, #52]	; (80010a4 <__libc_init_array+0x3c>)
 800106e:	1b64      	subs	r4, r4, r5
 8001070:	10a4      	asrs	r4, r4, #2
 8001072:	2600      	movs	r6, #0
 8001074:	42a6      	cmp	r6, r4
 8001076:	d109      	bne.n	800108c <__libc_init_array+0x24>
 8001078:	4d0b      	ldr	r5, [pc, #44]	; (80010a8 <__libc_init_array+0x40>)
 800107a:	4c0c      	ldr	r4, [pc, #48]	; (80010ac <__libc_init_array+0x44>)
 800107c:	f000 f818 	bl	80010b0 <_init>
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	2600      	movs	r6, #0
 8001086:	42a6      	cmp	r6, r4
 8001088:	d105      	bne.n	8001096 <__libc_init_array+0x2e>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001090:	4798      	blx	r3
 8001092:	3601      	adds	r6, #1
 8001094:	e7ee      	b.n	8001074 <__libc_init_array+0xc>
 8001096:	f855 3b04 	ldr.w	r3, [r5], #4
 800109a:	4798      	blx	r3
 800109c:	3601      	adds	r6, #1
 800109e:	e7f2      	b.n	8001086 <__libc_init_array+0x1e>
 80010a0:	080010c8 	.word	0x080010c8
 80010a4:	080010c8 	.word	0x080010c8
 80010a8:	080010c8 	.word	0x080010c8
 80010ac:	080010cc 	.word	0x080010cc

080010b0 <_init>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr

080010bc <_fini>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	bf00      	nop
 80010c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c2:	bc08      	pop	{r3}
 80010c4:	469e      	mov	lr, r3
 80010c6:	4770      	bx	lr
